<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>ImportExport</title>
<link rel="StyleSheet" href="../../doc/shared/examples.css" type="text/css">
<script type="text/javascript" src="../../doc/shared/utils.js"></script>
<script type="text/javascript">

function runExample(s)
{
	var root = g_app.ActiveSceneRoot;
	var prop = root.Properties.Item("DemoImportExportProp");
	if (!prop)
	{
		prop = root.AddProperty( "DemoImportExportProp" );
	}

	g_app.InspectObj( prop, null, null, 3, true );

}


</script>
</head>
<body>
<div class="body"><a name="top"></a>



<img class="netview" src="netview_ImportExport.jpg" style="float:left;padding-right:6px;">
<h1>ImportExport</h1>

<p>This example provides a good starting point for writing your own importer/exporter using the Softimage C++ API.&nbsp; The example shows how to
create a user interface for a typical import/export application, export geometry using the <strong>CGeometryAccessor</strong> class, and import polygon meshes using the <strong>CMeshBuilder</strong> class.
</p>

<h2>Example Files</h2>
<table><tr>
<td><strong>Location</strong></td><td><span class="installPath"></span>
</td>
</tr>

<tr>
<td><strong>Files</strong></td>
<td>
	<div class="examplefile">importexport.cpp</div>
	<div class="examplefile">importexport_menu.cpp</div>
	<div class="examplefile">importexport_prop.cpp</div>

	<div class="examplefile">importmesh_command.cpp</div>
	<div class="examplefile">exportmesh_command.cpp</div>
	<div class="examplefile">helper.cpp</div>

	<div class="examplefile">helper.h</div>
	<div class="examplefile">GNUmakefile</div>
	<div class="examplefile">ImportExport.vcproj</div>
</td>
</tr>


</table>


<a name="build"></a><h2>Running the Example</h2>

<div id="toinstall" style="display:none">
<p class="proc-head">To install the example</p>
<ul>
<li><p>Connect to the Softimage SDK workgroup at <span class="workgroupPath">%XSISDK_ROOT%\examples\workgroup</span>.</p>
	<ol>
	<li>In the <strong>Plug-in Manager</strong>, click the <strong>Workgroups</strong> tab.</li>
	<li>Click <strong>File</strong> and then click <strong>Connect</strong>.</li>
	<li>In the <strong>Connect to Workgroup</strong> dialog box, click <img src="..\..\doc\shared\bBrowse.gif">, locate the workgroup folder and then click <strong>Select</strong>.</li>
	</ol>
</li>
</ul>

<p class="proc-head">To view the help page for an example</p>

<ul>
<li>Do one of the following:</li>
<ul>
<li>In the Plug-in Tree, expand the SDK examples workgroup, right-click the example add-on and then click <strong>Help</strong>.
</li>
<li>
Open a Net View and click <img style="position:relative;bottom:-6px;" src="..\..\doc\shared\xsiweb.png"> to go to Softimage Net local. In the top navigation bar, click <strong>add-ons</strong>, and then click the SDK example add-on.
</li>
</ul>
</ul>

</div>

<div>
<p class="proc-head">To run the example</p>
<ol>
<li>On the main Softimage menubar, click <span class="runExample" title="Click to run the example">Demo Tool &gt; Import Export Demo</span>.
</li>

<li>
<p><strong>To export geometry information and cluster properties,</strong> select a polygon mesh object and click <strong>Export</strong>. Note that you can subdivide the exported geometry if you want. The data is exported to the text file specified in the text box.
</p>

</li>

<li><p><strong>To import a file</strong>, type the name of the file in the text box in the Import group, and then click <strong>Import Polygons</strong> to import a mesh with quads, or <strong>Import Triangles</strong> to import a mesh with triangles. The <strong>chunk size</strong> allows you to optimize the memory allocation when importing large sets of polygon mesh data.</p>
</li>
</ol>


<p><strong>Notes</strong></p>
<ul>
<li>
	<p>The exporter demo outputs the following information:</p>
	<ul>
				<li>Number of polygons, vertices, edges, nodes, and triangles</li>
				<li>Number of vertices per polygon</li>
				<li>Polygon vertex indices, vertex positions, vertex crease values, node indices, normals, edge indices, edge creates values, and hard edges</li>
				<li>Triangle vertex indices, node indices, and polygon index map</li>
				<li>Envelop weight map values</li>
				<li>UV values</li>
				<li>Vertex color values</li>
				<li>Polygon user normal values</li>
				<li>User motion values</li>
				<li>Shape key values</li>
				<li>Weight map values</li>
				<li>User data values for vertices, nodes, edges, and polygons</li>
				<li>Polygon material indices</li>
	</ul>
</li>
<li>The importer example does not import cluster properties&nbsp;and materials.</li>
</ul>



</div>


<a name="build"></a><h2>Building the C++ Example</h2>
<p>
Softimage SDK includes a compiled version of ImportExport. If you want to modify the code, you can rebuild the example by following these instructions.</p>

<div id="windows-build">
<p class="proc-head">To build the example on Windows</p>
<ol>
<li><p><span class="sishell">Open</span> an Softimage command prompt, and type <strong>devenv</strong> to start Visual Studio .NET.</p>
<p>Starting Visual Studio .NET from an Softimage command prompt ensures that environment variables such as XSISDK_ROOT are set (otherwise you'll get build and link errors).</p>
<p><strong>Tip</strong> To load the <span class="devenv" vcproj="ImportExport.vcproj">ImportExport</span> project from the command line, type:</p>
<pre>devenv <span class="installPath">ImportExport.vcproj</span></pre>
</li>
<li>In Visual Studio .NET, open the project file ImportExport.vcproj.</li>
<li>Select a configuration (Win32 Release or Win32 Debug) and build the DLL.</li>
</ol>
</div>


<div id="linux-build">
<p class="proc-head">To build the example on Linux</p>
<ol>
<li>
<p>In a shell (tcsh) window, type:</p>
<pre>source $XSI_HOME/<span class="linuxExt">.xsi_&lt;xsi_version&gt;</span></pre>
</li>

<li>
<p>Change directories to</p>
<pre><span class="installPath">cppsrc</span></pre>
</li>

<li>
<p>To remove all intermediate files before building the example, run this command:</p>
<pre>gmake clean</pre>
</li>

<li>
<p>To compile the example, run this command:<p>
<pre>gmake</pre>
</li>
</ol>
</div>


<div id="keywords">
<h2>Keywords</h2>
<p>This example uses the following keywords:</p>
<p>
C++ example, import, export, mesh, polygons, vertex, vertices,
CMeshFileReader,
CMeshBuilder,
ProgressBar, IsCancelPressed, GetUIToolkit,
GotoSection,
EndSection,
GetLongValues,
AddPolygons,
AddVertices,
PolygonMesh,
CErrorDescriptor,
CustomProperty,
AddProperty,
GetParameters,
AddParameter,
PPGItem, PutLabelMinPixels, PutLabelPercentage,
AddEnumControl,
AddButton, PutAttribute,
AddGroup, AddRow, EndGroup, EndRow,
PPGEvent, callback, PPGEventContext,GetAttribute, Button,
GetParameterValue,
ExecuteCommand,
Menu, MenuItem, AddCallbackItem,
XSILoadPlugin,
RegisterCommand,
RegisterMenu,
siMenuMainTopLevelID,
RegisterProperty
</p>
</div>

</div>
</body>
</html>
