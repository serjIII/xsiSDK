// SimpleCSCommandPlugin
// Initial code generated by Softimage SDK Wizard
// Executed Sat Sep 16 09:48:44 EDT 2006 by mbelzile
// 
// A command implemented with C#.
//
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.
//
//	Copyright 2008 Autodesk, Inc.  All rights reserved.  
//	Use of this software is subject to the terms of the Autodesk license agreement 
//	provided at the time of installation or download, or which otherwise accompanies 
//	this software in either electronic or hard copy form.   

using System;
using Softimage.XSIOM; // Softimage object model

//
// XSIPlugin class for creating the plug-in items to load. 
// Note: The name of the implementation class must be XSIPlugin
//
public class XSIPlugin : Base
{
	public bool Load( PluginRegistrar in_reg )
	{
		in_reg.Author = "Softimage";
		in_reg.Name = "C# Simple Command Plugin";
		in_reg.Major = 1;
		in_reg.Minor = 0;

		in_reg.RegisterCommand("SimpleCSCommand","SimpleCSCommand");

		return true;
	}

	public bool Unload( PluginRegistrar in_reg )
	{
		String strPluginName = null;
		strPluginName = in_reg.Name;
		Log(strPluginName + " has been unloaded.");
		return true;
	}
}

//
// SimpleCSCommand implementation. 
// Note: The name of the implementation class must be 
// the same as the plug-in item command i.e. SimpleCSCommand
//
public class SimpleCSCommand : Base
{
	// Called by Softimage to initialize the SimpleCSCommand arguments
	public bool Init( Context in_ctxt )
	{
		Command oCmd = (Command)in_ctxt.Source;
		oCmd.Description = "A simple command sample";
		oCmd.ReturnValue = true;

		ArgumentCollection oArgs = oCmd.Arguments;
		oArgs.AddWithHandler("Collection",StringModule.siArgHandlerCollection,null);
		oArgs.Add("LogFullName",siArgumentFlags.siArgumentInput,true,siVariantType.siBool);
		return true;
	}

	// Called by Softimage to execute SimpleCSCommand 
	public bool Execute( Context in_ctxt )
	{
		Log("SimpleCSCommand.Execute called");
	
        Array args = (Array)in_ctxt.GetAttribute("Arguments");

		XSICollection collection = null;
		bool bLogFullName = false;
		try
		{
			// Retrieve the command arguments. 
			// Note: The arguments are stored in an Array of type Object, therefore
			// you must perform a type cast to the right type when acessing the arguments
			// otherwise compiler error will occur.
			collection = (XSICollection)args.GetValue(0);
			bLogFullName = (bool)args.GetValue(1);

			Traverse((SIObject)collection[0], 0, bLogFullName);
		}
		catch(Exception e)
		{
			Error(e.ToString());
		}		

		return true;
	}

	// Logs all parameters of in_target
	private void Traverse(SIObject in_target, int in_indent, bool in_bLogFullname)
	{
		String dots = "";
		for (int j = 0; j < in_indent; j++)
		{
			dots += ".";
		}

		SIObjectCollection nesteds = in_target.NestedObjects;
		for (int i = 0; i < nesteds.Count; i++)
		{
			SIObject obj = nesteds[i];

			String strToLog = dots;

			strToLog += GetXSI().ClassName(obj);
			strToLog += ":";

			if (obj.IsClassOf(siClassID.siParameterID))
			{
				if (in_bLogFullname)
				{
					strToLog += ((Parameter)obj).FullName;
				}
				else
				{
					strToLog += ((Parameter)obj).ScriptName;
				}
			}
			else
			{
				if (in_bLogFullname)
				{
					strToLog += obj.FullName;
				}
				else
				{
					strToLog += obj.Name;
				}
			}
			Info(strToLog);
			Traverse(obj, in_indent + 1, in_bLogFullname);
		}
	}
}

// 
// This sample class is used to demonstrate how a base class can be used to implement plug-in items.
// 

public class Base
{
	CXSIApplicationClass m_xsi;
	CXSIFactoryClass m_fact;

	protected Base()
	{
		m_xsi = new CXSIApplicationClass();
		m_fact = new CXSIFactoryClass();
	}
	protected bool Log(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siVerbose);
		return true;
	}

	protected bool Info(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siInfo);
		return true;
	}

	protected bool Error(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siError);
		return true;
	}

	protected XSIApplication GetXSI()
	{
		return m_xsi;
	}

	protected XSIFactory GetFactory()
	{
		return m_fact;
	}
}
