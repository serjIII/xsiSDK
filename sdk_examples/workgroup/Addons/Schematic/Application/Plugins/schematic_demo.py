# Schematic Demo: Demonstrate the SDK Schematic view and SchematicNode object API.
# Initial code generated by Softimage SDK Wizard
# Executed Wed Nov 10 16:23:34 EST 2010 by belzilm
# 

# import some python shortcuts
# e.g. log -> Application.LogMessage
# e.g. C -> Softimage enums and constants 
from sipyutils import *

def XSILoadPlugin( in_reg ):
	in_reg.Author = "belzilm"
	in_reg.Name = "Schematic Demo"
	in_reg.Major = 1
	in_reg.Minor = 0

	# Log info menus
	bDisplayAsSubMenu = True
	in_reg.RegisterMenu(C.siMenuSchematicViewID,"LogViewInfo_Menu",bDisplayAsSubMenu,False)
	in_reg.RegisterMenu(C.siMenuSchematicViewContextID,"LogViewInfo_Menu",bDisplayAsSubMenu,False)	
	in_reg.RegisterMenu(C.siMenuSchematicNodeContextID,"LogNodeInfo_Menu",False,False)	
	
	# Rearrange menus
	in_reg.RegisterMenu(C.siMenuSchematicViewID,"RearrangeView_Menu",bDisplayAsSubMenu,False)
	in_reg.RegisterMenu(C.siMenuSchematicViewContextID,"RearrangeView_Menu",bDisplayAsSubMenu,False)	
	in_reg.RegisterMenu(C.siMenuSchematicNodeContextID,"RearrangeNode_Menu",False,False)	

	return True


def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	Application.LogMessage(str(strPluginName) + str(" has been unloaded."),C.siVerbose)
	return True


_trace = False
_gap = 20


def log_node_info( node, spc='' ):
	""" Log info on a single node """
	(x,y,w,h) = node.UIInfo
	log( '%sname=%s x=%d y=%d w=%d h=%d parent=%s object=%s selected=%d expanded=%d' % (spc,node.Name,x,y,w,h,node.Parent,node.Object,node.Selected,node.Expanded) )


def trace_node( node ):
	if _trace:
		log_node_info( node, spc='' )

	
def log_node( i, node ):
	""" Log info on a node branch"""
	spc = i*'..'
	(x,y,w,h) = node.UIInfo	
	log_node_info( node, spc=spc )
	for n in node.Nodes:
		log_node(i+1, n )

		
def log_all( sv, bSelection ):
	""" Log the info for all nodes in a view or for selected nodes only"""
	
	nodes = None
	
	if bSelection:
		nodes = sv.SelectedNodes
	else:
		nodes = sv.Nodes 
	
	for node in nodes:	
		log_node( 0, node )


def set_topdown_pos( node, posx, posy ):
	"""Recursive function to set node position in a top-down layout """
	node.Move( posx, posy )
	(posx,posy,width,height) = node.UIInfo

	trace_node( node )

	y = ytotal = posy + _gap			
	x = xtotal = posx + _gap

	for n in node.Nodes:
		y = ytotal
		(xtotal,ytotal) = set_topdown_pos( n, x+width, y+height )

	return (xtotal,ytotal)


def rearrange_all( sv, bSelection ):
	""" Rearrange all nodes in a view or nodes in selected nodes only"""	
	nodes = None
	
	if bSelection:
		nodes = sv.SelectedNodes
	else:
		nodes = sv.Nodes 
	
	x = y = 0
	for n in nodes:
	
		if n.Selected != C.siNotSelected:
			# retain selected node position
			(x,y,w,h) = n.UIInfo
			
		(xtotal,ytotal ) = set_topdown_pos(n, x, y )
		(posx,posy,width,height) = n.UIInfo
		y = ytotal + height


def rearrange_node( node ):
	""" Rearrange a single node's branch """
	(x,y,w,h) = node.UIInfo			
	set_topdown_pos(node, x, y )


def log_info_cb( ctxt ):

	Application.LogMessage("log_info_cb called")

	# Returns the view object or a list with the view object and the target node (siMenuSchematicNodeContextID only)		
	target = ctxt.GetAttribute('Target')
	anchorPtID = ctxt.GetAttribute('AnchorPointID')
	bSelection = ctxt.Source.Name == 'Selected nodes'
	
	if anchorPtID == C.siMenuSchematicViewID or anchorPtID == C.siMenuSchematicViewContextID:
		# log info on all currently selected nodes or the whole view tree otherwise
		# target -> view object
		log_all( target, bSelection )
		
	elif anchorPtID == C.siMenuSchematicNodeContextID:
		# log info on the node under the cursor
		# target(1) -> node under the cursor
		log_node( 0, target(1) )
	return True


def rearrange_cb( ctxt ):

	Application.LogMessage("rearrange_cb called")
	
	# Returns the view object or a list with the view object and the target node (siMenuSchematicNodeContextID only)
	target = ctxt.GetAttribute('Target')
	anchorPtID = ctxt.GetAttribute('AnchorPointID')
	bSelection = ctxt.Source.Name == 'Selected nodes'
		
	if anchorPtID == C.siMenuSchematicViewID or anchorPtID == C.siMenuSchematicViewContextID:
		# rearrange selected nodes or the whole view tree otherwise
		rearrange_all( target, bSelection )
	elif anchorPtID == C.siMenuSchematicNodeContextID:
		# rearrange the node under the cursor		
		rearrange_node( target(1) )
	return True


def LogViewInfo_Menu_Init( in_ctxt ):
	oMenu = in_ctxt.Source
	oMenu.Name = 'Log View Info'
	oMenu.AddCallbackItem("All nodes","log_info_cb")
	oMenu.AddCallbackItem("Selected nodes","log_info_cb")
	return True


def LogNodeInfo_Menu_Init( in_ctxt ):
	oMenu = in_ctxt.Source
	oMenu.AddCallbackItem("Log Node Info","log_info_cb")	
	return True


def RearrangeView_Menu_Init( in_ctxt ):
	oMenu = in_ctxt.Source
	oMenu.Name = 'Rearrange View'
	oMenu.AddCallbackItem("All nodes","rearrange_cb")
	oMenu.AddCallbackItem("Selected nodes","rearrange_cb")	
	return True


def RearrangeNode_Menu_Init( in_ctxt ):
	oMenu = in_ctxt.Source
	oMenu.AddCallbackItem("Rearrange Node","rearrange_cb")
	return True
