# DOFUtilsPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Tue Sep 13 13:24:24 EDT 2011 by Autodesk
# 
# 
# Tip: The wizard only exposes a small subset of the possible controls
# and layout that can be achieved on a Property Page.  To find out more
# please refer to the Object Model reference documentation for PPGLayout, PPG
# and CustomProperty
# 
# Tip: Don't be concerned about achieving the exact ordering of the parameters
# because they can easily be reordered in the second phase.
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants

null = None
false = 0
true = 1

def XSILoadPlugin( in_reg ):
	in_reg.Author = "Autodesk"
	in_reg.Name = "DOFUtilsPlugin"
	in_reg.Major = 1
	in_reg.Minor = 0

	in_reg.RegisterProperty("DOFSettings")
	in_reg.RegisterMenu(	constants.siMenuMainTopLevelID, 
							"DOF",
							False,
							True )
	#RegistrationInsertionPoint - do not remove this line

	return true

def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	return true

def DOFSettings_Define( in_ctxt ):
	oCustomProperty = in_ctxt.Source
	oCustomProperty.AddParameter2("FocalPlane",constants.siFloat,10,0,10000,0,20,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("FStop",constants.siFloat,22,0,10000,0,30,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("FocusRegionScale",constants.siFloat,1,0,1000,0,10,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("FocalLength",constants.siFloat,3.5,0,10000,0,20,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("Debug",constants.siInt4,0,0,2,0,2,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("MaxLevel",constants.siInt4,8,0,8,0,8,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("UseCameraSettings",constants.siBool,false,null,null,null,null,constants.siClassifUnknown,constants.siPersistable)
	oCustomProperty.AddParameter2("EnableDOF",constants.siBool,true,null,null,null,null,constants.siClassifUnknown,constants.siPersistable)
	return true

# Tip: Use the "Refresh" option on the Property Page context menu to 
# reload your script changes and re-execute the DefineLayout callback.
def DOFSettings_DefineLayout( in_ctxt ):
	oLayout = in_ctxt.Source
	oLayout.Clear()
	
	oLayout.AddItem("EnableDOF")
	oLayout.AddItem("MaxLevel")
	oLayout.AddEnumControl("Debug", ["No Debug", 0, "Buffers", 1, "Mipmaps", 2])

	oLayout.AddItem("UseCameraSettings")
	oLayout.AddGroup("Camera Settings Override")
	oLayout.AddItem("FocalLength")
	oLayout.EndGroup()

	oLayout.AddItem("FStop")
	oLayout.AddItem("FocusRegionScale")
	oLayout.AddItem("FocalPlane")
	
	oLayout.AddButton("Reset")
	return true

def DOFSettings_OnInit( ):
	UpdateLayout()
	
def DOFSettings_OnClosed( ):
	pass

def DOFSettings_Reset_OnClicked( ):
	cpset = Application.GetValue(PPG.InspectedObjects)
	if Application.ClassName(cpset) != "CustomProperty":
		return
	
	cpset.Parameters("FocalPlane").Value			= 10
	cpset.Parameters("FStop").Value					= 22
	cpset.Parameters("FocusRegionScale").Value		= 1
	cpset.Parameters("FocalLength").Value			= 3.5
	cpset.Parameters("MaxLevel").Value				= 8
	
def DOFSettings_UseCameraSettings_OnChanged( ):
	UpdateLayout()

def UpdateLayout( ):
	cpset = Application.GetValue(PPG.InspectedObjects)
	LogMessage(cpset)
	LogMessage(Application.ClassName(cpset))
	if Application.ClassName(cpset) != "CustomProperty":
		return
	
	if cpset.Parameters("UseCameraSettings").Value == True:
		cpset.Parameters("FocalLength").Enable(False)
	else:
		cpset.Parameters("FocalLength").Enable(True)
	
	
### Menus
def DOF_Init( in_ctxt ):
	cpset = Application.Dictionary.GetObject( "DOFSettings", False )
	if cpset and Application.ClassName(cpset) != "CustomProperty":
		cpset = None

	DOFIsOn = False
	if cpset:
		param = cpset.Parameters("EnableDOF")
		if param and Application.ClassName(cpset) != "Parameter":
			DOFIsOn = param.Value
			
	menu = in_ctxt.Source;
	
	if DOFIsOn:
		menuitem = menu.AddCallbackItem( "Disable DOF", "DisableDOF" )
	else:
		menuitem = menu.AddCallbackItem( "Enable DOF", "EnableDOF" )
		
	if cpset:
		menuitem = menu.AddCallbackItem( "Inspect DOF Settings", "InspectDOFSettings" )
	

def EnableDOF( in_ctxt ):
	cpset = Application.Dictionary.GetObject( "DOFSettings", False )

	if cpset and Application.ClassName(cpset) != "CustomProperty":
		cpset = None
		
	if cpset == None:
		root = Application.GetValue("Scene_Root")
		cpset = root.AddProperty("DOFSettings")

	cpset.Parameters("EnableDOF").Value = True
	

def DisableDOF( in_ctxt ):
	cpset = Application.Dictionary.GetObject( "DOFSettings", False )
	if cpset and Application.ClassName(cpset) != "CustomProperty":
		cpset = None
		
	if cpset == None:
		return
		
	cpset.Parameters("EnableDOF").Value = False
	
def InspectDOFSettings( in_ctxt ):
	cpset = Application.Dictionary.GetObject( "DOFSettings", False )
	if cpset:
		Application.InspectObj( cpset )
		