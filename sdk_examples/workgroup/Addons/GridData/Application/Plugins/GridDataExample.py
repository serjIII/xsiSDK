# GridDataExample Plugin
# Initial code generated by Softimage SDK Wizard
# Executed Wed Apr 6 14:27:52 EDT 2011 by Autodesk
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as C

GD_PROPERTY_NAME = "GDE_3DOGrid"
GD_PARAM_NAME = "Data"
GD_THUMBNAIL_SIZE	= 64


FULLNAME_COLUMN 	= 0
OBJECTID_COLUMN		= 1
VISIBILITY_COLUMN	= 2
COLOR_COLUMN		= 3
IMAGE_COLUMN		= 4
SB_COLUMN			= 5
UNIFORMSCL_COLUMN	= 6
TRANSLATION_COLUMN	= 7
STATSEL_COLUMN		= 8
BUTTON_COLUMN		= 9
FILE_COLUMN			= 10
COMMENT_COLUMN		= 11
NB_COLUMNS			= 12

# (col, label, type, width, read-only)
AllColumns = \
( 	(FULLNAME_COLUMN,	"Object",			C.siColumnStandard,		120, False),
	(OBJECTID_COLUMN,	"ID",				C.siColumnInt,			40, True),
	(VISIBILITY_COLUMN,	"Vis",				C.siColumnBool,			25, False),
	(COLOR_COLUMN,		"Color",			C.siColumnColor,		50, False),
	(IMAGE_COLUMN,		"Image",			C.siColumnImageClip,	50, False),
	(SB_COLUMN,			"ShaderBall",		C.siColumnShaderBall,	64, False),
	(UNIFORMSCL_COLUMN,	"Scaling",			C.siColumnFloat,		64, False),
	(TRANSLATION_COLUMN,"Translation",		C.siColumnVector,		128, False),
	(STATSEL_COLUMN,	"Static Selection",	C.siColumnCombo,		100, False),
	(BUTTON_COLUMN,		"Delete",			C.siColumnButton,		100, False),
	(FILE_COLUMN,		"File",				C.siColumnFile,			150, False),
	(COMMENT_COLUMN,	"Comment",			C.siColumnMultiLine,	125, False) )

def XSILoadPlugin( in_reg ):
	in_reg.Author = "Autodesk"
	in_reg.Name = "GridDataExamplePlugin"
	in_reg.Major = 1
	in_reg.Minor = 0

	# GDE means GridData Example
	in_reg.RegisterProperty(GD_PROPERTY_NAME)
	in_reg.RegisterCommand("GDE_Create3DOGrid","GDE_Create3DOGrid")
	
	#RegistrationInsertionPoint - do not remove this line

	return True


def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name

	return True


def GDE_Create3DOGrid_Init( in_ctxt ):
	oCmd = in_ctxt.Source
	oCmd.Description = ""
	oCmd.ReturnValue = True

	return True


def GDE_Create3DOGrid_Execute(  ):
	# Remove old GD
	ClearGD()
	
	# Create a new GD
	GetGD()
	
	# Refresh
	Refresh3DOs()
	
	Application.InspectObj(GetGDPropertyOrNone(), "", "", C.siLock)

	return True
	
def Refresh3DOs():
	gdProp = GetGDPropertyOrNone()
	if gdProp == None:
		# Nothing to refresh
		return
		
	gd = GetGD()
	
	all3DOs = Application.FindObjects(None, "{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}")
	scene3DOIDs = []
	for the3DO in all3DOs:
		if Application.ClassName(the3DO) == "X3DObject" and the3DO.Type == "polymsh":
			scene3DOIDs.append(the3DO.ObjectID)

	# Also add models
	allModels = Application.FindObjects(None, "{0496EAB0-0ECF-11D1-ABF1-00A02485CECB}")
	for theModel in allModels:
		if Application.ClassName(theModel) == "Model":
			# Do not add the scene root
			if theModel.FullName != "Scene_Root":
				scene3DOIDs.append(theModel.ObjectID)
	
	gdObjIDs = []
	removedObjIDs = []
	for row in range(gd.RowCount):
		objID = gd.GetCell(OBJECTID_COLUMN, row)
		gdObjIDs.append( objID )
		if objID not in scene3DOIDs:
			removedObjIDs.append( objID )
		
	addedObjIDs = []
	for id in scene3DOIDs:
		if id not in gdObjIDs:
			addedObjIDs.append(id)
			
	# Remove obsolete rows
	for id in removedObjIDs:
		for row in range(gd.RowCount):
			if gd.GetCell( OBJECTID_COLUMN, row ) == id:
				gd.RemoveRow(row)
				break
				
	# Add new objects
	for id in addedObjIDs:
		siObject = Application.GetObjectFromID( id )
		siObject = FixObject( siObject )
		AddObjToGD( siObject )
		
	# Populate
	for row in range(gd.RowCount):
		PopulateDataForRow( row )

def ClearGD():
	siProperty = GetGDPropertyOrNone()
	if siProperty:
		Application.DeleteObj(siProperty)
		
		
def GetGDPropertyOrNone():
	siProperty = Application.ActiveSceneRoot.GetPropertyFromName( GD_PROPERTY_NAME ) ;
	return siProperty


def GetOrCreateGDProperty():
	siProperty = GetGDPropertyOrNone()
	if siProperty is None:
		siProperty = Application.ActiveSceneRoot.AddProperty( GD_PROPERTY_NAME ) ;

	return siProperty


def GetGD() :
	siProperty = GetOrCreateGDProperty()
#	if not siProperty:
#		siProperty = Application.ActiveSceneRoot.AddProperty( "CustomProperty", False, GD_PROPERTY_NAME ) ;
	
	return siProperty.Parameters(GD_PARAM_NAME).Value ;
	

def AddObjToGD( obj ):
	gd = GetGD()

	rowCnt = gd.RowCount
	
	if rowCnt == 0:
		# First initialization of the grid data.
		# Set the column definition
		gd.RowCount = 1
		gd.ColumnCount = NB_COLUMNS
		for colDef in AllColumns:
			(col, label, type, width, ro) = colDef 
			gd.SetColumnLabel(col, label)

			if col in (SB_COLUMN,IMAGE_COLUMN):
				gd.SetColumnDef(col, type, [GD_THUMBNAIL_SIZE])
			elif col == TRANSLATION_COLUMN:
				gd.SetColumnDef(col, type, [3])
			elif col == FILE_COLUMN:
				gd.SetColumnDef(col, type, [])
			elif col == OBJECTID_COLUMN:
				gd.SetColumnDef(col, type, [0])
			elif col == UNIFORMSCL_COLUMN:
				gd.SetColumnDef(col, type, [])
			else:
				gd.SetColumnType(col, type)
			if col == STATSEL_COLUMN:
				gd.SetColumnComboItems(	STATSEL_COLUMN , 
							[	"Automatic"			, 8, 
								"Bounding Box"		, 5,
								"WireFrame"			, 0,
								"Hidden Line"		, 6,
								"Constant"			, 7,
								"Shaded"			, 1,
								"Texture"			, 4,
								"Texture Decal"		, 9,
								"Realtime Shaders"	, 10 ] )
	else:
		gd.InsertRow(rowCnt)
	
	# Only populate intial values here
	#
	# Object ID
	gd.SetCell(OBJECTID_COLUMN, rowCnt, obj.ObjectID)
	# Button 
	gd.SetCell(	BUTTON_COLUMN, 
				rowCnt, 
				"Delete" )
	# Comment
	gd.SetCell(COMMENT_COLUMN, rowCnt, "This is a multiline edit control. Use Ctrl-Enter to insert a line feed")

	# Populate the rest using this helper function
	PopulateDataForRow( rowCnt )


# Will populate everything except object ID	
def PopulateDataForRow( row ):
	gd = GetGD()

	objID = gd.GetCell(OBJECTID_COLUMN, row)
	obj = Application.GetObjectFromID(objID)
	obj = FixObject(obj)

	gd.SetRowLabel(row, "%s"%row)
	gd.SetCell(FULLNAME_COLUMN, row, obj.FullName)
	
	
	gd.SetCell(	VISIBILITY_COLUMN, 
				row, 
				obj.Properties("visibility").Parameters("viewvis").Value )
	gd.SetCell(	COLOR_COLUMN, 
				row, 
				GetSceneColorForObj(obj) )
				
	clip = GetSceneImageForObj( obj )
	if clip:
		gd.SetCell(	IMAGE_COLUMN, 
					row, 
					clip )
				
	material = GetSceneMaterialForObj( obj )
	if material:
		gd.SetCell(	SB_COLUMN, 
					row, 
					material )

	# Set current translation values
	gd.SetCell(	TRANSLATION_COLUMN, 
				row, 
				[	obj.Kinematics.Local.posx.Value,
					obj.Kinematics.Local.posy.Value,
					obj.Kinematics.Local.posz.Value ])
					
	# File
	gd.SetCell(	FILE_COLUMN, 
				row, 
				"C:\ChangeMeForAValid\FileName.Please" )

	# Static Selection mode
	gd.SetCell(	STATSEL_COLUMN, 
				row, 
				obj.Properties("Display").Parameters("staticsel").Value )

	# Set read-only flag and background color
	color = gd.GetCellBackgroundColor( FULLNAME_COLUMN, row )
	if obj.Type == "polymsh":
		color.Red = 154
		color.Green = 187
		color.Blue = 133
		color.Alpha = 0
	elif obj.Type == "#model":
		color.Red = 35
		color.Green = 161
		color.Blue = 203
		color.Alpha = 0

	for colDef in AllColumns:
		(col, label, type, width, ro) = colDef
		gd.SetCellReadOnlyFlags( [	col, row ], ro )
		gd.SetCellBackgroundColor( col, row, color )

def GDE_3DOGrid_Define( in_ctxt ):
	oCustomProperty = in_ctxt.Source
	oCustomProperty.AddGridParameter(GD_PARAM_NAME)
	
	return True


def GDE_3DOGrid_DefineLayout( in_ctxt ):
	oLayout = in_ctxt.Source
	gridItem = oLayout.AddItem(GD_PARAM_NAME)
	
	# Set the column widths
	widthString = "25" # The header column
	for colDef in AllColumns:
		(col, label, type, width, ro) = colDef
		widthString += ":%s"%width

	gridItem.SetAttribute( "ColumnWidths", widthString ) ;

	# set to either C.siSelectionCell, C.siSelectionHeader or C.siSelectionNone 
	gridItem.SetAttribute( "SelectionMode", C.siSelectionCell ) ;
	
	oLayout.AddButton("Refresh_Data")
	oLayout.AddButton("Dump_Data")

	return True


def GDE_3DOGrid_OnInit( ):
	return True

def GDE_3DOGrid_Refresh_Data_OnClicked():
	Refresh3DOs()

def GDE_3DOGrid_Dump_Data_OnClicked():
	gd = GetGDFromPPG(PPG)
	if gd == None:
		return True
		
	for row in range( gd.RowCount ):
		trace = "row %d: "%row
		for col in range( gd.ColumnCount ):
			if col != 0:
				trace += "|"
				
			type = gd.GetColumnType( col )
			
			data = gd.GetCell( col, row )
			if	type == C.siColumnColor:
				r = data & 0xFF
				g = (data & 0xFF00) >> 8
				b = (data & 0xFF0000) >> 16
				a = (data & 0xFF000000) >> 24
				trace += str( "%d,%d,%d,%d"%( r, g, b, a) )
			else:
				trace += str( data )
		
		Application.LogMessage( trace )
			
def GDE_3DOGrid_Data_OnBeginSelectionChange( cells ) :
	return GetFilteredOutFlags( cells, [OBJECTID_COLUMN] )

def GDE_3DOGrid_Data_OnEndSelectionChange( cells ) :
	gd = GetGDFromPPG(PPG)
	if gd == None:
		return True
	
	selection = Application.Selection
	
	rowColumns = []
	rowColumns.extend(cells[0])
	
	isBracketed = False

	while len(rowColumns) >= 2:
		col = rowColumns.pop(0)
		row = rowColumns.pop(0)
		
		# Do not process headers
		if col == -1 or row == -1:
			continue

		objID = gd.GetCell(OBJECTID_COLUMN, row)
		obj = Application.GetObjectFromID(objID)
		obj = FixObject(obj)

		if col == FULLNAME_COLUMN:
			if not isBracketed:
				Application.BeginUndo("GDE_3DOGrid_Data_OnEndSelectionChange")
				isBracketed = True
			selection.Clear()
			selection.Add(obj)
		if col == COLOR_COLUMN:
			if not isBracketed:
				Application.BeginUndo("GDE_3DOGrid_Data_OnEndSelectionChange")
				isBracketed = True
			SetSceneColorForObj(obj, gd.GetCell(COLOR_COLUMN, row))

	if isBracketed:
		Application.EndUndo()
		
	return True


def GDE_3DOGrid_Data_OnContextMenuInit( cells ) :
	gd = GetGDFromPPG(PPG)
	if gd == None:
		return []
		
	return [	"Set Read-Only Flag", 0,
				"Reset Read-Only Flag", 1,
				"Print Selected Read-Only flags", 2, 
				"Print Selected Column Definitions", 3 ]

def GDE_3DOGrid_Data_OnContextMenuSelected( cells ) :
	gd = GetGDFromPPG(PPG)
	if gd == None:
		return True
		
	selection = gd.GridWidget.GetSelection()
	
	menuItem = cells[1]
	if menuItem == 0:
		gd.SetCellReadOnlyFlags( selection, True )
	elif menuItem == 1:
		gd.SetCellReadOnlyFlags( selection, False )
	elif menuItem == 2:
		roFlags = gd.GetCellReadOnlyFlags( selection )
		for i in range(len(roFlags)):
			LogMessage("(%s,%s) = %s"%(selection[i*2], selection[i*2+1], "True" if roFlags[i] else "False" ))
	elif menuItem == 3:
		rowColumns = []
		rowColumns.extend(selection)
		while len(rowColumns) >= 2:
			col = rowColumns.pop(0)
			row = rowColumns.pop(0)
			LogMessage("(%s,%s) = %s"%(col, row, gd.GetColumnDef( col ) ))

def GetFilteredOutFlags( cells, columnsToFilter ) :
	gd = GetGDFromPPG(PPG)
	if gd == None:
		return True

	rowColumns = []
	rowColumns.extend(cells[0])
	
	# Return an array of Bool, True when cell can me modified, otherwise False.
	# For now only filter the OBJECTID_COLUMN out
	outFlags = []
	while len(rowColumns) >= 2:
		col = rowColumns.pop(0)
		row = rowColumns.pop(0)
		
		if col in columnsToFilter:
			outFlags.append( False )
		else:
			outFlags.append( True )
	
	return outFlags

def GDE_3DOGrid_Data_OnBeginValueChange( cells ) :
	return GetFilteredOutFlags( cells, [FULLNAME_COLUMN] )

def GDE_3DOGrid_Data_OnEndValueChange( cells ) :
	gd = GetGDFromPPG(PPG)
	if gd == None:
		return True

	rowColumns = []
	rowColumns.extend(cells[0])

	isBracketed = False

	while len(rowColumns) >= 2:
		col = rowColumns.pop(0)
		row = rowColumns.pop(0)
		
		objID = gd.GetCell(OBJECTID_COLUMN, row)
		obj = Application.GetObjectFromID(objID)
		obj = FixObject(obj)

		if col == VISIBILITY_COLUMN:
			if not isBracketed:
				Application.BeginUndo("GDE_3DOGrid_Data_OnEndValueChange")
				isBracketed = True
			obj.Properties("visibility").Parameters("viewvis").Value = gd.GetCell(VISIBILITY_COLUMN, row)
		elif col == COLOR_COLUMN:
			if not isBracketed:
				Application.BeginUndo("GDE_3DOGrid_Data_OnEndValueChange")
				isBracketed = True
			SetSceneColorForObj(obj, gd.GetCell(COLOR_COLUMN, row))
		elif col == STATSEL_COLUMN:
			if not isBracketed:
				Application.BeginUndo("GDE_3DOGrid_Data_OnEndValueChange")
				isBracketed = True
			obj.Properties("Display").Parameters("staticsel").Value = gd.GetCell(STATSEL_COLUMN, row)
		elif col == UNIFORMSCL_COLUMN:
			if not isBracketed:
				Application.BeginUndo("GDE_3DOGrid_Data_OnEndValueChange")
				isBracketed = True
			obj.Kinematics.Local.sclx = gd.GetCell(UNIFORMSCL_COLUMN, row)
			obj.Kinematics.Local.scly = gd.GetCell(UNIFORMSCL_COLUMN, row)
			obj.Kinematics.Local.sclz = gd.GetCell(UNIFORMSCL_COLUMN, row)
		elif col == TRANSLATION_COLUMN:
			if not isBracketed:
				Application.BeginUndo("GDE_3DOGrid_Data_OnEndValueChange")
				isBracketed = True
			translation = gd.GetCell(TRANSLATION_COLUMN, row)
			obj.Kinematics.Local.posx = translation[0]
			obj.Kinematics.Local.posy = translation[1]
			obj.Kinematics.Local.posz = translation[2]


	if isBracketed:
		Application.EndUndo()

def GDE_3DOGrid_Data_OnButtonClicked( cells ) :
	gd = GetGDFromPPG(PPG)
	if gd == None:
		return True

	rowColumns = []
	rowColumns.extend(cells[0])
	
	idsToRemove = []
	while len(rowColumns) >= 2:
		col = rowColumns.pop(0)
		row = rowColumns.pop(0)
		idsToRemove.append( gd.GetCell(OBJECTID_COLUMN, row ) )

	objsToRemove = []
	for id in idsToRemove:
		siObject = Application.GetObjectFromID( id )
		siObject = FixObject( siObject )
		Application.DeleteObj( siObject )
		
	# Refresh
	Refresh3DOs()

def FixObject(in_bad):
    """
    When the Softimage API returns a python object it may screw up its
    dispatch tables in some cases (particularly when returning an object
    as its superclass).  This fixes it.  Used in GetObjectByID.
    """
    return win32com.client.dynamic.Dispatch(in_bad) if in_bad else None


def GetGDFromPPG(PPG):
	inspectedObjs = PPG.Inspected
	gd = None
	for obj in inspectedObjs:
		if obj.IsClassOf(C.siCustomPropertyID):
			param = obj.Parameters(GD_PARAM_NAME)
			if param:
				gd = param.Value
				break
	return gd


def GetSceneColorForObj( obj ):
	siDisplay = obj.Properties("Display")
	red 	= int(255*siDisplay.Parameters("wirecolorr").Value)
	green	= int(255*siDisplay.Parameters("wirecolorg").Value)
	blue	= int(255*siDisplay.Parameters("wirecolorb").Value)

	return red + (green << 8) + (blue << 16)


def SetSceneColorForObj( obj, color ):
	siDisplay = obj.Properties("Display")
	red		= ((color & 0xFF) )				/ 255.0
	green	= ((color & 0xFF00)		>> 8) 	/ 255.0
	blue	= ((color & 0xFF0000)	>> 16)	/ 255.0
	siDisplay.Parameters("wirecolorr").Value = red
	siDisplay.Parameters("wirecolorg").Value = green
	siDisplay.Parameters("wirecolorb").Value = blue


def GetSceneImageForObj( obj ):
	materials = obj.materials
	for mat in materials:
		imageClips = mat.ImageClips
		for clip in imageClips:
			return clip

	return None

def GetSceneMaterialForObj( obj ):
	materials = obj.materials
	for mat in materials:
		return mat

	return None
	
