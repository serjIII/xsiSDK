// CSProjectSelectorPlugin
// Initial code generated by Softimage SDK Wizard
// Executed Wed Sep 27 14:48:39 EDT 2006 by mbelzile
// 
// Examples of a custom property implementedin C# which manage Softimage projects.
// 
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.
//
//	Copyright 2008 Autodesk, Inc.  All rights reserved.  
//	Use of this software is subject to the terms of the Autodesk license agreement 
//	provided at the time of installation or download, or which otherwise accompanies 
//	this software in either electronic or hard copy form.   

using System;
using Softimage.XSIOM; // Softimage object model
using Softimage.XSIUtil;

//
// XSIPlugin class for creating the plug-in items to load. 
// Note: The name of the implementation class must be XSIPlugin
//
public class XSIPlugin : Base
{
	public bool Load(PluginRegistrar in_reg)
	{
		in_reg.Author = "Softimage";
		in_reg.Name = "C# Project Selector Plug-in";
		in_reg.Major = 1;
		in_reg.Minor = 0;

		in_reg.RegisterProperty(CSProjectSelector.m_type);
		in_reg.RegisterMenu(siMenuAnchorPoints.siMenuMainTopLevelID, "CSProjectSelector_Menu", false, false);
		in_reg.RegisterEvent("CSChangeProjectEvent", siEventID.siOnChangeProject);

		return true;
	}
}

//
// CSProjectSelector Custom Property implementation
// Note: The name of this class must match the name of the custom property plug-in item
//

public class CSProjectSelector : Base
{
	public static String m_name = "CSProjectSelectorProp";
	public static String m_type = "CSProjectSelector";

	public bool Define( Context in_ctxt )
	{
		try
		{
			CustomProperty oCustomProperty = (CustomProperty)in_ctxt.Source;

			oCustomProperty.AddParameter2(	"RadioBtn",
											siVariantType.siInt4,
											1,1,3,null,null,
											siParamClassification.siClassifUnknown,
											(int)siCapabilities.siPersistable,
											null,null,null);
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool DefineLayout( Context in_ctxt )
	{
		try
		{
			PPGLayout layout = (PPGLayout)in_ctxt.Source;
			layout.Clear();

			layout.AddGroup("Select a project", true, 0);

			PPGItem item = layout.AddItem("RadioBtn", "Projects", StringModule.siControlRadio);

			Object[] items = new Object[6] {	"Default", 1,
												"Animation", 2,
												"Compositing", 3 };
			item.UIItems = items;
			layout.EndGroup();
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool PPGEvent( Context in_ctxt )
	{
		try
		{
			PPGEventContext ppgctxt = (PPGEventContext)in_ctxt;
			siPPGEventID eventID = ppgctxt.EventID;

			if ( eventID == siPPGEventID.siParameterChange )
			{
				// The Source of the event is the parameter itself
				Parameter changed = (Parameter)ppgctxt.Source;				
				if ("RadioBtn" != changed.ScriptName)
				{
					// unrelated
					return true;
				}
				
				int projectSelected = (int)changed.GetValue2( null );

				Project currproj = GetXSI().get_ActiveProject();

				String projPath = null;
				String userPath = GetXSI().GetInstallationPath2(siInstallationPath.siUserPath);
				switch (projectSelected)
				{
					case 1:
					{
						// default project
						projPath = BuildPath( userPath, "Default" );
					}
					break;

					case 2:
					{
						// animation project
						projPath = BuildPath( userPath, "Animation" );
					}
					break;

					case 3:
					{
						// compositing project
						projPath = BuildPath( userPath, "Compositing" );
					}
					break;
				};

				if (currproj.FullName != projPath)
				{
					// create (if not done yet) and activate the project
					Project proj= GetXSI().CreateProject(projPath);
					GetXSI().ActiveProject2 = proj;
				}					
			}
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}
}

public class CSProjectSelector_Menu : Base
{
	public bool Init( Context in_ctxt )
	{
		Menu oMenu = null;
		oMenu = (Menu)in_ctxt.Source;
		oMenu.AddCallbackItem("Launch C# Project Selector","OnCSProjectSelectorMenuClicked");
		return true;
	}

	public bool OnCSProjectSelectorMenuClicked( Context in_ctxt )
	{	
		try
		{
			// Inspect CSProjectSelector property

			Array inspectobjArgs = Array.CreateInstance( typeof(Object), 5 );
			inspectobjArgs.SetValue( GetProjectSelectorProp( ), 0 );
			GetXSI().ExecuteCommand( "InspectObj", inspectobjArgs);
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	Property GetProjectSelectorProp( )
	{
		Property prop = null;
		try
		{
			Model root = GetXSI().ActiveSceneRoot;
			prop = root.Properties[ CSProjectSelector.m_name ];

			if ( prop == null )
			{
				prop = root.AddProperty(CSProjectSelector.m_type, false, CSProjectSelector.m_name);
			}
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}
		return prop;
	}
}

public class CSChangeProjectEvent : Base
{
	public bool OnEvent( Context in_ctxt )
	{
		try
		{
			// Set the layout according to the new active project
			String newProjectPath = (String)in_ctxt.GetAttribute("NewProjectPath");		
			String userPath = GetXSI().GetInstallationPath2(siInstallationPath.siUserPath);

			String defaultProj = BuildPath( userPath, "Default" );
			String animProj = BuildPath( userPath, "Animation" );
			String compProj = BuildPath( userPath, "Compositing" );

			Desktop desktop = GetXSI().Desktop;

			if ( newProjectPath == defaultProj )
			{
				desktop.ActiveLayout = desktop.Layouts["Default"];
			}
			else if ( newProjectPath == animProj )
			{
				desktop.ActiveLayout = desktop.Layouts["Dual"];
			}
			else if ( newProjectPath == compProj )
			{
				desktop.ActiveLayout = desktop.Layouts["Compositing"];
			}
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}
}

// 
// Base class with common services. Used by plug-in item classes such as 
// the CSProjectSelector operator class.
// 

public class Base
{
	CXSIApplicationClass m_xsi;
	CXSIFactoryClass m_fact;
	CXSIUtilsClass m_utils;

	protected Base()
	{
		m_xsi = new CXSIApplicationClass();
		m_fact = new CXSIFactoryClass();
		m_utils = new CXSIUtilsClass();
	}
	protected bool Log(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siVerbose);
		return true;
	}

	protected bool Info(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siInfo);
		return true;
	}

	protected bool Error(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siError);
		return true;
	}

	protected XSIApplication GetXSI()
	{
		return m_xsi;
	}

	protected XSIFactory GetFactory()
	{
		return m_fact;
	}

	protected XSIUtils GetUtils()
	{
		return m_utils;
	}

	protected String BuildPath(String in_segment1, String in_segment2)
	{
		return m_utils.BuildPath(in_segment1, in_segment2, null, null, null, null, null, null);
	}
}
