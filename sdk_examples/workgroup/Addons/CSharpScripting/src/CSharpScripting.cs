// CSharpScripting
// Initial code generated by Softimage SDK Wizard
// Executed Fri Oct 13 09:42:49 EDT 2006 by mbelzile
// 
// This plug-in shows how to use C# as a scripting language from the Scripting Editor. 
// You can use this plug-in when you need to test some simple C# code in Softimage without 
// having to create a C# plug-in. 
//
// The C# scripting code must contain the following entrypoint:
// class Script 
// {
//  public static void Main() 
//  {
//	 // Code goes here
//  }
// }
// 
// Note: Code to execute must be added in the Main function.
//
// The C# scripting features can be used from the C# Scripting context menu 
// by right-clicking in the Scripting Editor window pane. The menu contains the 
// following entries:
//
// Run: Compiles and executes the current C# script. Compile errors are listed in the history, if any.
// New: Clears the Scripting Editor and adds a blank C# script.
// Open: Loads a .cs file in the editor.
// Open User Files: Lists all user .cs files in a sub-menu. Files can be loaded by selecting an entry.
// Save: Saves the content of the editor in a .cs file. 
// Save As: Saves the content of the editor in a new .cs file. 
// References: Lists the assemblies referenced by the current C# script. This list is required by the C# compiler.
//
//	Copyright 2008 Autodesk, Inc.  All rights reserved.  
//	Use of this software is subject to the terms of the Autodesk license agreement 
//	provided at the time of installation or download, or which otherwise accompanies 
//	this software in either electronic or hard copy form.   


using System;
using System.IO;				// Directory and Path
using System.CodeDom.Compiler;	// For CodeDomProvider
using System.Reflection;		// For Assembly
using System.Windows.Forms;		// For OpenFileDialog
using Softimage.XSIOM;			// Softimage object model
using Softimage.XSIMath;
using Softimage.XSIUtil;

// C# scripting plug-in entry-point.
public class XSIPlugin : Base
{
	public bool Load( PluginRegistrar in_reg )
	{
		in_reg.Author = "Softimage";
		in_reg.Name = "CSharpScriptingPlugin";
		in_reg.Major = 1;
		in_reg.Minor = 0;

		in_reg.RegisterCommand("ExecuteDotNetScript", "ExecuteDotNetScript");
		in_reg.RegisterMenu(	siMenuAnchorPoints.siMenuScriptEditContextID,
								"CSharpScripting_Menu",
								true,true);
		in_reg.RegisterProperty("CSharpScriptingReferences");
		return true;
	}
}

// ExecuteDotNetScript: Command to compile and execute .NET source code.
// Usage:
//	ExecuteDotNetScript <language>, <source code>
//
public class ExecuteDotNetScript : Base
{
	public bool Init( Context in_ctxt )
	{
		Command oCmd = null;
		oCmd = (Command)in_ctxt.Source;
		oCmd.Description = "Compile and execute .NET script";
		oCmd.ReturnValue = false;

		ArgumentCollection oArgs = null;
		oArgs = oCmd.Arguments;
		oArgs.Add("language", siArgumentFlags.siArgumentInput, null, siVariantType.siString);
		oArgs.Add("source", siArgumentFlags.siArgumentInput, null, siVariantType.siString);
		return true;
	}

	public bool Execute( Context in_ctxt )
	{
		Log("ExecuteDotNetScript.Execute called");

		Array args = (Array)in_ctxt.GetAttribute("Arguments");

		try
		{
			// Compiles and executes the .NET code given a 
			string language = (string)args.GetValue(0);
			string source = (string)args.GetValue(1);
			DotNetScripting.Run(GetXSI(), language, source);
		}
		catch(Exception e)
		{
			Error(e.ToString());
		}		

		return true;
	}
}

// CSharpScripting_Menu: Implements the C# scripting menu
//
public class CSharpScripting_Menu : Base
{
	string m_userPath;

	public CSharpScripting_Menu()
	{
		m_userPath = GetXSI().GetInstallationPath2(siInstallationPath.siUserPath) + @"\Application\Plugins";	
	}

	public bool Init( Context in_ctxt )
	{
		Softimage.XSIOM.Menu menu = null;
		menu = (Softimage.XSIOM.Menu)in_ctxt.Source;
		menu.Name = "C# Scripting";

		menu.AddCallbackItem("Run", "OnExecuteCSharpScript");
		menu.AddSeparatorItem();
		menu.AddCallbackItem("New", "OnNewCSharpScript");
		menu.AddSeparatorItem();
		menu.AddCallbackItem("Open...", "OnOpenCSharpScript");

		Softimage.XSIOM.Menu submenu = (Softimage.XSIOM.Menu)menu.AddItem("Open User Files", siMenuItemStyle.siMenuItemSubmenu);
		AddUserFilesToMenu("cs", submenu);
		menu.AddSeparatorItem();
		menu.AddCallbackItem("Save", "OnSaveCSharpScript");
		menu.AddCallbackItem("SaveAs...", "OnSaveAsCSharpScript");
		menu.AddSeparatorItem();
		menu.AddCallbackItem("References...", "OnReferenceSetting");
		return true;
	}

	public bool OnExecuteCSharpScript(Context in_ctxt)
	{
		try
		{
			Softimage.XSIOM.View view = (Softimage.XSIOM.View)in_ctxt.GetAttribute("Target");
			string strCode = (string)view.GetAttributeValue("text");

			DotNetScripting.Run(GetXSI(), "C#", strCode);
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool OnNewCSharpScript(Context in_ctxt)
	{
		try
		{
			Softimage.XSIOM.View view = (Softimage.XSIOM.View)in_ctxt.GetAttribute("Target");

			Object oVal = DotNetScripting.m_csTemplate;
			view.SetAttributeValue("newfilename", ref oVal);
			oVal = "c#";
			view.SetAttributeValue("syntaxhighlight", ref oVal);
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool OnSaveCSharpScript(Context in_ctxt)
	{
		try
		{
			Softimage.XSIOM.View view = (Softimage.XSIOM.View)in_ctxt.GetAttribute("Target");
			string strFname = (string)view.GetAttributeValue("filename");

			SaveScript(view, strFname, false);
			return true;
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool OnSaveAsCSharpScript(Context in_ctxt)
	{
		try
		{
			Softimage.XSIOM.View view = (Softimage.XSIOM.View)in_ctxt.GetAttribute("Target");

			SaveScript(view, null, true);
			return true;
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool OnOpenCSharpScript(Context in_ctxt)
	{
		try
		{
			Softimage.XSIOM.View view = (Softimage.XSIOM.View)in_ctxt.GetAttribute("Target");
			string strCode = (string)view.GetAttributeValue("text");

			// Get file name
			OpenFileDialog dlg = new OpenFileDialog();
			dlg.DefaultExt = "cs";
			dlg.Filter = "cs files (*.cs)|*.cs";
			dlg.FilterIndex = 1;
			dlg.RestoreDirectory = true;
			dlg.InitialDirectory = m_userPath;

			string strFname=null;
			if (dlg.ShowDialog() == DialogResult.OK)
			{
				strFname = dlg.FileName;
			}

			if (strFname.Length==0)
			{
				return false;
			}

			// Update scripting editor
			Object val = strFname;
			view.SetAttributeValue("filename", ref val);
			return true;
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool OnSelectCSharpFile(Context in_ctxt)
	{
		try
		{
			Softimage.XSIOM.View view = (Softimage.XSIOM.View)in_ctxt.GetAttribute("Target");
			Softimage.XSIOM.MenuItem menuitem = (Softimage.XSIOM.MenuItem)in_ctxt.Source;
			
			string strFname = m_userPath + @"\" + menuitem.Name;
			Object val = strFname;
			view.SetAttributeValue("filename", ref val); 
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	public bool OnReferenceSetting(Context in_ctxt)
	{
		try
		{
			Array inspectobjArgs = Array.CreateInstance(typeof(Object), 5);
			inspectobjArgs.SetValue( CSharpScriptingReferences.PSet(GetXSI()), 0);
			GetXSI().ExecuteCommand("InspectObj", inspectobjArgs);
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}
		return true;
		
	}

	void AddUserFilesToMenu(string in_ext, Softimage.XSIOM.Menu in_menu)
	{
		if (!Directory.Exists(m_userPath))
		{
			return;
		}

		string [] csfiles = Directory.GetFiles(m_userPath, "*."+in_ext);
		foreach (string fpath in csfiles)
		{
			string fname = Path.GetFileName(fpath);
			in_menu.AddCallbackItem( fname, "OnSelectCSharpFile" );
		}

		if (csfiles.Length==0)
		{
			in_menu.Enabled = false;
		}
	}

	void SaveScript(Softimage.XSIOM.View in_view, string in_fname, bool in_bForce)
	{
		try
		{
			if (in_fname == null || in_fname.Length == 0 || in_bForce)
			{
				// Get file name
				SaveFileDialog dlg = new SaveFileDialog();
				dlg.DefaultExt = "cs";
				dlg.Filter = "C# files (*.cs)|*.cs";
				dlg.FilterIndex = 1;
				dlg.RestoreDirectory = true;
				dlg.InitialDirectory = m_userPath;

				if (dlg.ShowDialog() == DialogResult.OK)
				{
					in_fname = dlg.FileName;
				}
			}

			if (in_fname == null || in_fname.Length == 0)
			{
				return;
			}

			// Save file
			Object val = in_fname;
			in_view.SetAttributeValue("savefilename", ref val);
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}
	}
}

// Custom property used for maintaining the list of assemblies required to
// compile the current C# script.

public class CSharpScriptingReferences : Base
{
	public bool DefineLayout(Context in_ctxt)
	{
		PPGLayout oPPGLayout = (PPGLayout)in_ctxt.Source;
		RebuildLayout(oPPGLayout);
		return true;
	}

	public bool Define(Context in_ctxt)
	{
		try
		{
			CustomProperty oCustomProperty = (CustomProperty)in_ctxt.Source;
			Parameter oGridParam = oCustomProperty.AddGridParameter("Refs");
			
			GridData oGridData = (GridData)oGridParam.GetValue2(0);
			oGridData.ColumnCount = 1;
			oGridData.SetColumnLabel(0, "C# Scripting References");

			string sfactoryPath = GetXSI().GetInstallationPath2(siInstallationPath.siFactoryPath) + @"\Application\bin\";
			string[] refs = new string[3];

			// Add commonly used assemblies to grid
			refs.SetValue(sfactoryPath + "Softimage.XSIOM.dll", 0);
			refs.SetValue(sfactoryPath + "Softimage.XSIMath.dll", 1);
			refs.SetValue(sfactoryPath + "Softimage.XSIUtil.dll", 2);

			oGridData.RowCount = 3;

			int nRowIdx = 0;
			foreach( string r in refs )
			{
				object[] vals = new object[1] {	r };
				oGridData.SetRowValues(nRowIdx++, vals);
			}
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	void RebuildLayout(PPGLayout in_oLayout)
	{
		try
		{
			in_oLayout.Clear();

			in_oLayout.AddRow();
			in_oLayout.AddButton("BtnAddRef", "Add");
			in_oLayout.AddButton("BtnRemoveRef", "Remove");
			in_oLayout.EndRow();

			PPGItem oGridCtrl = in_oLayout.AddItem("Refs", "", StringModule.siControlGrid);
			oGridCtrl.SetAttribute(StringModule.siUINoLabel, true);
			oGridCtrl.SetAttribute(StringModule.siUIGridSelectionMode, siGridSelectionMode.siSelectionHeader);
			oGridCtrl.SetAttribute(StringModule.siUIGridColumnWidths, "25:275");
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}
	}

	public bool PPGEvent(Context in_ctxt)
	{
		try
		{
			PPGEventContext oPPGCtxt = (PPGEventContext)in_ctxt;
			siPPGEventID eventID = oPPGCtxt.EventID;

			if (eventID == siPPGEventID.siButtonClicked)
			{
				String buttonPressed = (String)oPPGCtxt.GetAttribute("Button");

				if (buttonPressed == "BtnAddRef")
				{
					// Add reference to list and rebuild the ppg layout
					Property oProp = (Property)oPPGCtxt.Source;
					GridData oGridData = (GridData)oProp.Parameters["Refs"].GetValue2(0);
					++oGridData.RowCount;
					long nRowIdx = oGridData.RowCount-1;

					object[] vals = new object[1] {"<Add reference here>"};
					oGridData.SetRowValues(nRowIdx, vals);

					RebuildLayout( ((CustomProperty)oProp).PPGLayout );

					in_ctxt.SetAttribute("Refresh",true);
				}
				else if (buttonPressed == "BtnRemoveRef")
				{
					// Remove reference from list and rebuild the ppg layout
					Property oProp = (Property)oPPGCtxt.Source;
					GridData oGridData = (GridData)oProp.Parameters["Refs"].GetValue2(0);
					Grid_RemoveSelectedRow( oGridData );

					RebuildLayout(((CustomProperty)oProp).PPGLayout);
					in_ctxt.SetAttribute("Refresh", true);
				}
			}
		}
		catch (Exception e)
		{
			Error(e.ToString());
		}

		return true;
	}

	void Grid_RemoveSelectedRow( GridData in_oGridData )
	{
		in_oGridData.BeginEdit() ;	
		GridWidget oGridWidget ;
		try
		{
			oGridWidget = in_oGridData.GridWidget;
		}
		catch( Exception e )
		{
			// This can fail if the Grid is not actually 
			// visible on a PPG.  CLearly no rows would be selected
			// so just return
			Info(e.ToString());
			return;
		}
		
		int writePos = 0 ;
		for ( int readPos = 0  ; readPos < in_oGridData.RowCount ; readPos++ )
		{
			if ( !oGridWidget.IsRowSelected(readPos) )
			{
				if ( readPos != writePos )
				{
					in_oGridData.SetRowValues(	writePos, 
												in_oGridData.GetRowValues( readPos ) ) ;
				}
			
				writePos++ ;
			}
		}
		
		// Shrink the GridData
		in_oGridData.RowCount = writePos ;
		in_oGridData.EndEdit() ;				
	}

	// Return the custom property object, create one if none exists
	static public CustomProperty PSet(XSIApplication in_xsi)
	{
		Property prop = null;
		try
		{
			Model root = in_xsi.ActiveSceneRoot;
			prop = root.Properties["CS_References"];

			if (prop == null)
			{
				prop = root.AddProperty("CSharpScriptingReferences", false, "CS_References");
			}
		}
		catch (Exception e)
		{
			in_xsi.LogMessage(e.ToString(), siSeverity.siError);
		}
		return (CustomProperty)prop;
	}
}

// DotNetScripting: Helper class for compiling/executing .NET code such as
// C# and Boo.
public class DotNetScripting : Base
{
	// C# template required for executing C# code from the Scripting Editor
	public static string m_csTemplate = @"using System;
using Softimage.XSIOM;
	
class Script
{
	public static void Main()
	{
		CXSIApplicationClass xsi = new CXSIApplicationClass();	

		// TODO: Put your code here!!
	}
}";

	// Compiles and executes source code in memory with the compiler specified with in_lang.
	// The function returns if no compiler is defined for in_lang.
	static public void Run(XSIApplication in_xsi, string in_lang, string in_source)
	{
		try
		{
			if (!CodeDomProvider.IsDefinedLanguage(in_lang))
			{
				// No provider defined for this language
				string sMsg = "No compiler is defined for " + in_lang;
				in_xsi.LogMessage(sMsg, siSeverity.siError);
				return;
			}

			CodeDomProvider compiler = CodeDomProvider.CreateProvider(in_lang);
			CompilerParameters parameters = new CompilerParameters();
			parameters.GenerateExecutable = false;
			parameters.GenerateInMemory = true;
			parameters.OutputAssembly = "DotNET-Script-Tmp";
			parameters.MainClass = "Script.Main";
			parameters.IncludeDebugInformation = false;

			// Add references to assemblies
			GridData oGridData = (GridData)CSharpScriptingReferences.PSet(in_xsi).Parameters["Refs"].GetValue2(0);
			for (int i = 0; i < oGridData.RowCount; i++)
			{
				object[] refs = (object[])oGridData.GetRowValues(i);
				parameters.ReferencedAssemblies.Add((string)refs[0]);
			}

			CompilerResults results = compiler.CompileAssemblyFromSource(parameters, in_source);

			if (results.Errors.Count > 0)
			{
				string sErrors = in_lang + " compilation failed:\n";
				foreach (CompilerError err in results.Errors)
				{
					sErrors += err.ToString() + "\n";
				}
				in_xsi.LogMessage(sErrors, siSeverity.siError);
			}
			else
			{
				object o = results.CompiledAssembly.CreateInstance("Script");
				Type type = o.GetType();
				MethodInfo m = type.GetMethod("Main");
				m.Invoke(o, null);

				// Done with the temp assembly
				if (File.Exists("DotNET-Script-Tmp"))
				{
					File.Delete("DotNET-Script-Tmp");
				}
			}
		}
		catch (Exception e)
		{
			in_xsi.LogMessage(e.ToString(), siSeverity.siError);

			// Done with the temp assembly
			if (File.Exists("DotNET-Script-Tmp"))
			{
				File.Delete("DotNET-Script-Tmp");
			}
		}
	}
}

// Helper class for commonly used Softimage objects.
public class Base
{
	CXSIApplicationClass m_xsi;
	CXSIFactoryClass m_fact;
	CXSIUtilsClass m_utils;

	protected Base()
	{
		m_xsi = new CXSIApplicationClass();
		m_fact = new CXSIFactoryClass();
		m_utils = new CXSIUtilsClass();
	}
	protected bool Log(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siVerbose);
		return true;
	}

	protected bool Info(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siInfo);
		return true;
	}

	protected bool Error(String str)
	{
		m_xsi.LogMessage(str, siSeverity.siError);
		return true;
	}

	protected XSIApplication GetXSI()
	{
		return m_xsi;
	}

	protected XSIFactory GetFactory()
	{
		return m_fact;
	}

	protected XSIUtils GetUtils()
	{
		return m_utils;
	}
}