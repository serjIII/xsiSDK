// CustomVector3ToScalar Plugin
// Initial code generated by Softimage SDK Wizard
// Executed Fri Dec 14 22:02:30 EST 2007 by mbelzile
// 
// 
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.
//
//	Copyright 2008 Autodesk, Inc.  All rights reserved.  
//	Use of this software is subject to the terms of the Autodesk license agreement 
//	provided at the time of installation or download, or which otherwise accompanies 
//	this software in either electronic or hard copy form.   

#pragma warning (disable : 4127) // conditional expression is constant
#pragma warning (disable : 4389) // signed/unsigned mismatch
#pragma warning (disable : 4714) // marked as __forceinline not inlined
#pragma warning (disable : 4244) // conversion ... possible loss of data
#pragma warning (disable : 4245) // signed/unsigned mismatch

#include <xsi_application.h>
#include <xsi_context.h>
#include <xsi_pluginregistrar.h>
#include <xsi_status.h>

#include <xsi_icenodecontext.h>
#include <xsi_icenodedef.h>
#include <xsi_command.h>
#include <xsi_factory.h>
#include <xsi_math.h>
#include <xsi_vector2f.h>
#include <xsi_vector3f.h>
#include <xsi_vector4f.h>
#include <xsi_matrix3f.h>
#include <xsi_matrix4f.h>
#include <xsi_rotationf.h>
#include <xsi_quaternionf.h>
#include <xsi_color4f.h>
#include <xsi_shape.h>
#include <xsi_indexset.h>
#include <xsi_dataarray.h>
#include <xsi_dataarray2D.h>
#include <xsi_projectitem.h>

// Defines port, group and map identifiers used for registering the ICENode
enum IDs
{
	ID_IN_v3 = 0,
	ID_G_100 = 100,
	ID_OUT_x = 200,
	ID_OUT_y = 201,
	ID_OUT_z = 202,
	ID_TMAP = 400,
	ID_SMAP,
	ID_CMAP,
	ID_UNDEF = ULONG_MAX
};

XSI::CStatus RegisterCustomVector3ToScalar( XSI::PluginRegistrar& in_reg );

using namespace XSI; 

XSIPLUGINCALLBACK CStatus XSILoadPlugin( PluginRegistrar& in_reg )
{
	in_reg.PutAuthor(L"Softimage");
	in_reg.PutName(L"CustomVector3ToScalar Plugin");
	in_reg.PutEmail(L"");
	in_reg.PutURL(L"");
	in_reg.PutVersion(1,0);

	RegisterCustomVector3ToScalar( in_reg );

	//RegistrationInsertionPoint - do not remove this line

	return CStatus::OK;
}

CStatus RegisterCustomVector3ToScalar( PluginRegistrar& in_reg )
{
	ICENodeDef nodeDef;
	nodeDef = Application().GetFactory().CreateICENodeDef(L"CustomVector3ToScalar", L"Custom Vector3 To Scalar");

	CStatus st;

	// Add input ports and groups.
	st = nodeDef.AddPortGroup(ID_G_100);
	st.AssertSucceeded( ) ;

	st = nodeDef.AddInputPort(	ID_IN_v3,
								ID_G_100,
								siICENodeDataVector3,
								siICENodeStructureSingle,
								siICENodeContextComponent0D,
								L"v3",L"v3",
								MATH::CVector3f(1.0,1.0,1.0),
								ID_UNDEF, ID_SMAP, ID_CMAP);
	st.AssertSucceeded( ) ;

	// Add output ports.
	st = nodeDef.AddOutputPort(	ID_OUT_x,
								siICENodeDataFloat,
								siICENodeStructureSingle,
								siICENodeContextComponent0D,
								L"x",L"x",
								ID_UNDEF, ID_SMAP, ID_CMAP);
	st.AssertSucceeded( ) ;

	st = nodeDef.AddOutputPort(	ID_OUT_y,
								siICENodeDataFloat,
								siICENodeStructureSingle,
								siICENodeContextComponent0D,
								L"y",L"y",
								ID_UNDEF, ID_SMAP, ID_CMAP);
	st.AssertSucceeded( ) ;

	st = nodeDef.AddOutputPort(	ID_OUT_z,
								siICENodeDataFloat,
								siICENodeStructureSingle,
								siICENodeContextComponent0D,
								L"z",L"z",
								ID_UNDEF, ID_SMAP, ID_CMAP);
	st.AssertSucceeded( ) ;

	PluginItem nodeItem = in_reg.RegisterICENode(nodeDef);
	nodeItem.PutCategories(L"Custom ICENode Sample");

	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus CustomVector3ToScalar_Init( const XSI::CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	ULONG id = ProjectItem(ctxt.GetSource()).GetObjectID();
	
	Application().LogMessage( L"CustomVector3ToScalar id from Init: " + CString( id ) );
	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus CustomVector3ToScalar_Term( const XSI::CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	ULONG id = ProjectItem(ctxt.GetSource()).GetObjectID();
	
	Application().LogMessage( L"CustomVector3ToScalar id from Term: " + CString( id ) );
	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus CustomVector3ToScalar_Evaluate( ICENodeContext& in_ctxt )
{
	// Get the output data array
	CDataArrayFloat outData( in_ctxt );

	// .. and the input array
	CDataArrayVector3f inputData( in_ctxt, ID_IN_v3 );

	// And the index set
	CIndexSet indexSet( in_ctxt );

	// Set the output data 
	ULONG outport_uniqid = in_ctxt.GetEvaluatedOutputPortID( );
		
	switch( outport_uniqid )
	{
		case ID_OUT_x:
		{
			for(CIndexSet::Iterator it = indexSet.Begin(); it.HasNext(); it.Next())
			{
				outData[it] = inputData[it].GetX();
			}
		}
		break;
	
		case ID_OUT_y:
		{
			for(CIndexSet::Iterator it = indexSet.Begin(); it.HasNext(); it.Next())
			{
				outData[it] = inputData[it].GetY();
			}
		}
		break;

		case ID_OUT_z:
		{
			for(CIndexSet::Iterator it = indexSet.Begin(); it.HasNext(); it.Next())
			{
				outData[it] = inputData[it].GetZ();
			}
		}
		break;
	};

	return CStatus::OK;
}

