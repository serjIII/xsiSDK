// ElementGenerator Plugin
// Initial code generated by Softimage SDK Wizard
// Executed Sun Dec 16 17:43:33 EST 2007 by mbelzile
// 
// 
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.
//
//	Copyright 2008 Autodesk, Inc.  All rights reserved.  
//	Use of this software is subject to the terms of the Autodesk license agreement 
//	provided at the time of installation or download, or which otherwise accompanies 
//	this software in either electronic or hard copy form.   

#pragma warning (disable : 4127) // conditional expression is constant
#pragma warning (disable : 4389) // signed/unsigned mismatch
#pragma warning (disable : 4714) // marked as __forceinline not inlined
#pragma warning (disable : 4244) // conversion ... possible loss of data
#pragma warning (disable : 4245) // signed/unsigned mismatch

#include <xsi_application.h>
#include <xsi_context.h>
#include <xsi_pluginregistrar.h>
#include <xsi_status.h>

#include <xsi_icenodecontext.h>
#include <xsi_icenodedef.h>
#include <xsi_command.h>
#include <xsi_factory.h>
#include <xsi_math.h>
#include <xsi_vector2f.h>
#include <xsi_vector3f.h>
#include <xsi_vector4f.h>
#include <xsi_matrix3f.h>
#include <xsi_matrix4f.h>
#include <xsi_rotationf.h>
#include <xsi_quaternionf.h>
#include <xsi_color4f.h>
#include <xsi_shape.h>
#include <xsi_indexset.h>
#include <xsi_dataarray.h>
#include <xsi_dataarray2D.h>

// Defines port, group and map identifiers used for registering the MDNode
enum IDs
{
	ID_IN_Size = 0,
	ID_G_100 = 100,
	ID_OUT_CloudPositions = 200,
	ID_OUT_NumberOfElements = 201,
	ID_TMAP = 400,
	ID_SMAP,
	ID_CMAP,
	ID_UNDEF = ULONG_MAX
};

XSI::CStatus RegisterElementGenerator( XSI::PluginRegistrar& in_reg );

using namespace XSI; 

XSIPLUGINCALLBACK CStatus XSILoadPlugin( PluginRegistrar& in_reg )
{
	in_reg.PutAuthor(L"Softimage");
	in_reg.PutName(L"ElementGenerator Plugin");
	in_reg.PutEmail(L"");
	in_reg.PutURL(L"");
	in_reg.PutVersion(1,0);

	RegisterElementGenerator( in_reg );

	//RegistrationInsertionPoint - do not remove this line

	return CStatus::OK;
}

CStatus RegisterElementGenerator( PluginRegistrar& in_reg )
{
	ICENodeDef nodeDef;
	nodeDef = Application().GetFactory().CreateICENodeDef(L"ElementGenerator", L"Element Generator");

	CStatus st;

	// Add input ports and groups.
	st = nodeDef.AddPortGroup(ID_G_100);
	st.AssertSucceeded( ) ;

	st = nodeDef.AddInputPort(	ID_IN_Size,
								ID_G_100,
								siICENodeDataLong,
								siICENodeStructureSingle,
								siICENodeContextSingleton,
								L"Size",L"Size",
								4);
	st.AssertSucceeded( ) ;

	// Add output ports.
	st = nodeDef.AddOutputPort(	ID_OUT_CloudPositions,
								siICENodeDataVector3,
								siICENodeStructureSingle,
								siICENodeContextElementGenerator,
								L"CloudPositions",L"CloudPositions");
	st.AssertSucceeded( ) ;

	st = nodeDef.AddOutputPort(	ID_OUT_NumberOfElements,
								siICENodeDataLong,
								siICENodeStructureSingle,
								siICENodeContextSingleton,
								L"NumberOfElements",L"NumberOfElements");
	st.AssertSucceeded( ) ;

	PluginItem nodeItem = in_reg.RegisterICENode(nodeDef);
	nodeItem.PutCategories(L"Custom ICENode Sample");

	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus ElementGenerator_Evaluate( ICENodeContext& in_ctxt )
{
	// The current output port being evaluated...
	ULONG out_portID = in_ctxt.GetEvaluatedOutputPortID( );

	switch( out_portID )
	{
		case ID_OUT_CloudPositions:
		{
			// Get the output port array ...
			CDataArrayVector3f outData( in_ctxt );
			CDataArrayLong inSize( in_ctxt, ID_IN_Size );
			
			ULONG nSize = inSize[ 0 ];
			CIndexSet indexSet( in_ctxt );
			
			for(CIndexSet::Iterator it = indexSet.Begin(); it.HasNext(); it.Next())
			{
				ULONG nAbsIndex = it.GetAbsoluteIndex( );
				
				ULONG x = nAbsIndex % nSize;
				ULONG y = nAbsIndex / nSize;
																		
				MATH::CVector3f v;
				v.PutX( x * 1.0f - nSize/2 );
				v.PutY( y * 1.0f - nSize/2 );
				v.PutZ( 0.0f );					
				outData[ it ] = v;					
			}
		}
		break;

		case ID_OUT_NumberOfElements:
		{
			// Returns the number of elements generated
			CDataArrayLong outData( in_ctxt );
			outData[ 0 ] = in_ctxt.GetNumberOfElementsToProcess( );
		}
		break;

	};

	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus ElementGenerator_BeginEvaluate( ICENodeContext& in_ctxt )
{
	CDataArrayLong inSize( in_ctxt, ID_IN_Size );
	
	// Total number of elements to generate
	ULONG nSize = inSize[ 0 ];
	ULONG nElements = nSize * nSize;
	in_ctxt.PutNumberOfElementsToProcess( nElements );

	return CStatus::OK;
}

