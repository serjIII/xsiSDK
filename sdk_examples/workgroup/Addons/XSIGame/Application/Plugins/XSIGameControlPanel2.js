// Custom Property Plug-in - Code generated by CPSetWizard
// 
// Tip: The wizard only exposes a small subset of the possible controls
// and layout that can be achieved on a Property Page.  To find out more
// please refer to the Object Model reference documentation for PPGLayout, PPG
// and CustomProperty
// 
// Suggested workflow for using the wizard is the following:
// 	1)Use the wizard to create the rough design of your wizard.  You can run the
// 	wizard generation over and over again until you are satisfied with the results.
// 	Don't be concerned about achieving the exact ordering of the parameters
// 	because they can easily be reordered in the second phase.
// 
// 	2)Once you have the rough outline you will edit the code directly.
// 	Use the "Refresh" option on the Property Page context menu to 
// 	reload your script changes and re-execute the DefineLayout callback.
// 	Once you have changed the code directly do not run the
// 	wizard anymore, otherwise your changes will be lost.
//
//	Copyright 2008 Autodesk, Inc.  All rights reserved.  
//	Use of this software is subject to the terms of the Autodesk license agreement 
//	provided at the time of installation or download, or which otherwise accompanies 
//	this software in either electronic or hard copy form.   

var gPsetObject = null;


function XSILoadPlugin( in_reg )
{
	Trace("XSIGame XSILoadPlugin");
	in_reg.Author = "Simon Inwood";
	in_reg.Name = "XSIGame";
	in_reg.Major = 1;
	in_reg.Minor = 1;
	in_reg.RegisterProperty( "XSIGameControlPanel2" );
	in_reg.RegisterCommand("SIGetGameControlPanelPset");
	in_reg.RegisterCommand("XSIGame_AddToAB");
	in_reg.RegisterCommand("XSIGame_Checkout");
	in_reg.RegisterCommand("XSIGame_Checkin");
	in_reg.RegisterCommand("XSIGame_GetLatest");
	in_reg.RegisterCommand("XSIGame_UndoCheckout");
	in_reg.RegisterCommand("XSIGame_GetDataLocation");
		
	return true;
}
function XSIUnloadPlugin( in_reg )
{
	Trace("XSIGame XSIUnloadPlugin");
	return true;
}

//===============================================================
// Util functions
//===============================================================
function GenericABCall( in_sCmdName, in_target, oPPG )
{
	var oAlienBrain=0;
	var oParamXML=0;
	try
	{
		oAlienBrain = new ActiveXObject( "NxNNamespace.NxNNamespaceHelper" );
		oParamXML = new ActiveXObject( "NxNXMLHelper.NxNXMLParameter" );
	}
	catch(error)
	{
		logmessage ("Failed to create AlienBrain activex");
		return;
	}

	if (oPPG)
		oPPG.ABLog.value = "Doing "+in_sCmdName+"...\r\n";
	
	// Transform it in a valid AB path using the NxNMapper object
	var abPath;
	try
	{
		abPath = abMapPath( in_target );
	}
	catch (error)
	{
		var sMessage = "abMapPath command from the AlienBrain-Softimage integration is missing, please install the latest integration\r\n";
		logmessage( sMessage );
		if (oPPG)
			oPPG.ABLog.value += sMessage;
		return;
	}

	// Now call the command
	oParamXML.Reset();
	oParamXML.Command = in_sCmdName;
	if (in_sCmdName == "Import")
	{
		oParamXML.ParamIn( "LocalPath" ) = in_target;
	}
	oParamXML.XML = oAlienBrain.runcommand( abPath, in_sCmdName, oParamXML.XML,false );
	if (oParamXML.WasSuccessful != true)
	{
		var sMessage = "Alienbrain: Failed to "+in_sCmdName+" file: " + in_target + "\r\n";
		Logmessage( sMessage );
		if (oPPG)
			oPPG.ABLog.value += sMessage;
			
		return false;
	}
	else
	{
		if (oPPG)
			oPPG.ABLog.value += "Operation Completed.\r\n";
		return true;
	}
}

//===============================================================
// Commands
//===============================================================
function SIGetGameControlPanelPset_Init( ctxt )
{
	var oCmd;
	oCmd = ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	oCmd.SetFlag( siNoLogging );

	return true;
}
function SIGetGameControlPanelPset_Execute(  )
{
	if ( ""+gPsetObject == "null" )
	{
		gPsetObject = XSIFactory.CreateObject("XSIGameControlPanel2");
		gPsetObject.Name = "XSIGame";
	}
	
	return gPsetObject;
}

function XSIGame_GetDataLocation_Init( ctxt )
{
	var oCmd;
	oCmd = ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	oCmd.SetFlag( siNoLogging );

	return true;
}
function XSIGame_GetDataLocation_Execute(  )
{
	if ( ""+gPsetObject == "null" )
		return;

	return gPsetObject.GameDataDirectory.value;
}

function XSIGame_AddToAB_Init( ctxt )
{
	var oCmd;
	oCmd = ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	oCmd.SetFlag( siNoLogging );

	var oArgs = oCmd.Arguments;
	oArgs.Add( "Target", siArgumentInput, "", siString );	

	return true;
}

function XSIGame_Checkout_Init( ctxt )
{
	var oCmd;
	oCmd = ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	oCmd.SetFlag( siNoLogging );

	var oArgs = oCmd.Arguments;
	oArgs.Add( "Target", siArgumentInput, "", siString );	

	return true;
}
function XSIGame_Checkin_Init( ctxt )
{
	var oCmd;
	oCmd = ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	oCmd.SetFlag( siNoLogging );

	var oArgs = oCmd.Arguments;
	oArgs.Add( "Target", siArgumentInput, "", siString );	

	return true;
}
function XSIGame_GetLatest_Init( ctxt )
{
	var oCmd;
	oCmd = ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	oCmd.SetFlag( siNoLogging );

	var oArgs = oCmd.Arguments;
	oArgs.Add( "Target", siArgumentInput, "", siString );	

	return true;
}
function XSIGame_UndoCheckout_Init( ctxt )
{
	var oCmd;
	oCmd = ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	oCmd.SetFlag( siNoLogging );

	var oArgs = oCmd.Arguments;
	oArgs.Add( "Target", siArgumentInput, "", siString );	

	return true;
}

function XSIGame_AddToAB_Execute( in_sTarget )
{
	return GenericABCall( "Import", in_sTarget );
}
function XSIGame_Checkout_Execute( in_sTarget )
{
	return GenericABCall( "CheckOut", in_sTarget );
}
function XSIGame_Checkin_Execute( in_sTarget )
{
	return GenericABCall( "SubmitPendingChange", in_sTarget );
}
function XSIGame_GetLatest_Execute( in_sTarget )
{
	return GenericABCall( "GetLatest", in_sTarget );
}
function XSIGame_UndoCheckout_Execute( in_sTarget )
{
	return GenericABCall( "UndoCheckOut", in_sTarget );
}

//===============================================================
// Custom properties
//===============================================================

function XSIGameControlPanel2_Define( io_Context )
{
	Trace("XSIGameControlPanel2_Define");
	
	var fso = XSIFactory.CreateActiveXObject("Scripting.FileSystemObject");
	
	var pluginfilename = GetPluginFileName();
	var pluginfolder = fso.GetParentFolderName(fso.GetParentFolderName(fso.GetParentFolderName(pluginfilename)));
	var sDataPath;
	// Try to get the gamedata path from the file.
	fso. pluginfolder
	try 
	{
		var ForReading = 1;
		var sFilePath = pluginfolder +"\\datalocation.txt";
		f = fso.OpenTextFile(sFilePath, ForReading);
		sDataPath = f.ReadAll();
	}
	catch(e)
	{
		sDataPath=pluginfolder;
	}
	
	var oCustomProperty = io_Context.Source;
	oCustomProperty.AddParameter2( "GameDataDirectory",siString, sDataPath, null,null,null,null,0,siPersistable );
	oCustomProperty.AddParameter2( "ABLog", siString );
}

function XSIGameControlPanel2_DefineLayout( io_Context )
{
	Trace("XSIGameControlPanel2_DefineLayout");

	var oLayout,oItem;
	oLayout = io_Context.Source;
	oLayout.Clear(  );
	var oAlienBrain=null;
	var oItem;
	
	// Verify if we have alienbrain
	try
	{
		oAlienBrain = new ActiveXObject( "NxNNamespace.NxNNamespaceHelper" );
	}catch(error)
	{
	}
	oLayout.AddGroup("Asset Revision Control");
		oLayout.AddItem( "GameDataDirectory", "Data Folder", siControlFolder );
		if (oAlienBrain==null)
		{
			oLayout.AddStaticText ("You need to install AlienBrain in order to use this functionality.");
		}
		oLayout.AddRow();
			oItem = oLayout.AddButton( "XSIGAMESyncAssets", "Get all latest" );
			if (oAlienBrain==null)
				oItem.SetAttribute( siUIButtonDisable, true);
			oItem = oLayout.AddButton( "XSIGAMEUndoAllRevisions", "Undo all check-out" );
			if (oAlienBrain==null)
				oItem.SetAttribute( siUIButtonDisable, true);
			oItem = oLayout.AddButton( "XSIGAMECommitRevisions", "Check-in all" );
			if (oAlienBrain==null)
				oItem.SetAttribute( siUIButtonDisable, true);
			oItem = oLayout.AddButton( "XSIGAMEListCheckout", "List Check-out Files" );
			if (oAlienBrain==null)
				oItem.SetAttribute( siUIButtonDisable, true);
			oItem = oLayout.AddButton( "XSIGAMEOpenABView", "Open AlienBrain view" );
			if (oAlienBrain==null)
				oItem.SetAttribute( siUIButtonDisable, true);
		oLayout.EndRow();	

		oItem = oLayout.AddString( "ABLog", "",true, 100 ) ;
		oItem.SetAttribute( siUINoLabel, true );

	oLayout.EndGroup();
	
	oLayout.AddGroup("Rendermap");
		oLayout.AddGroup("Bake");
			oLayout.AddRow();
				oLayout.AddButton( "XSIGAMEBakeLevel", "Level" );
				oLayout.AddButton( "XSIGAMEBakeModel", "Model" );
				oLayout.AddButton( "XSIGAMEBakeProp", "Prop" );
			oLayout.EndRow();	
		oLayout.EndGroup();
	oLayout.EndGroup();

	oLayout.AddGroup("PowerUps!");
		oLayout.AddRow();
			oLayout.AddButton( "XSIGAMEAddPowerUp", "Add PowerUp" );
			oLayout.AddButton( "XSIGAMEEditPowerUp", "Edit PowerUp" );
		oLayout.EndRow();	
	oLayout.EndGroup();

}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// AlienBrain Buttons
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
function XSIGameControlPanel2_XSIGAMESyncAssets_OnClicked()
{
	GenericABCall( "GetLatest", PPG.GameDataDirectory.value, PPG );
}

function XSIGameControlPanel2_XSIGAMEUndoAllRevisions_OnClicked()
{
	GenericABCall( "UndoCheckOut", PPG.GameDataDirectory.value, PPG );
}

function XSIGameControlPanel2_XSIGAMECommitRevisions_OnClicked()
{
	GenericABCall( "SubmitPendingChange", PPG.GameDataDirectory.value, PPG );
}

function XSIGameControlPanel2_XSIGAMEOpenABView_OnClicked()
{
	openview("Alienbrain_Tree");
}

function XSIGameControlPanel2_XSIGAMEListCheckout_OnClicked()
{
	var oPPG = PPG;
	var oAlienBrain=0;
	var oParamXML=0;
	try
	{
		oAlienBrain = new ActiveXObject( "NxNNamespace.NxNNamespaceHelper" );
		oParamXML = new ActiveXObject( "NxNXMLHelper.NxNXMLParameter" );
	}
	catch(error)
	{
		logmessage ("Failed to create AlienBrain activex");
		return;
	}

	if (oPPG)
		oPPG.ABLog.value = "Files Checked-out...\r\n";
	
	// Transform it in a valid AB path using the NxNMapper object
	var abPath;
	try
	{
		abPath = abMapPath( PPG.GameDataDirectory.value );
	}
	catch (error)
	{
		var sMessage = "abMapPath command from the AlienBrain-Softimage integration is missing, please install the latest integration\r\n";
		logmessage( sMessage );
		if (oPPG)
			oPPG.ABLog.value += sMessage;
		return;
	}

	// Get the username
    var sUserName = oAlienBrain.GetProperty(abPath, 'UserName');

	// Now call the command
    var sCmdPath = "\\Workspace\\Search Results";
    var sCommand = "Shortcut_Search";
	oParamXML.Reset();
	oParamXML.Command = sCommand;
	oParamXML.ParamIn( "NamespacePath" ) = abPath;
	oParamXML.ParamIn( "SearchExpression") = "NUMBER(SCOT_LockedBy_"+sUserName+")>0";
	oParamXML.ParamIn( "SearchFlags" ) = 0;
	
	var sResult = oAlienBrain.runcommand( sCmdPath, "Shortcut_Search", oParamXML.XML, false );
    oParamXML.XML = sResult;
    var nHits = 0;
    
    logmessage (sResult);
    
	if (oParamXML.WasSuccessful != true)
	{
		var sMessage = "Alienbrain: Failed to call Shortcut_Search on: " + PPG.GameDataDirectory.value + "\r\n";
		Logmessage( sMessage );
		if (oPPG)
			oPPG.ABLog.value += sMessage;
			
		return false;
	}
    else
    {          
        var nHits = oParamXML.ParamOut("Hits");
		if (oPPG)
			oPPG.ABLog.value += "Nb Hits: " + nHits + "\r\n";
    }
}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function XSIGameControlPanel2_XSIGAMEBakeProp_OnClicked()
{
	Trace("XSIGameControlPanel2_XSIGAMEBakeProp_OnClicked");
}

function XSIGameControlPanel2_XSIGAMEBakeLevel_OnClicked()
{
	Trace("XSIGameControlPanel2_XSIGAMEBakeLevel_OnClicked");
}

function XSIGameControlPanel2_XSIGAMEBakeModel_OnClicked()
{
	Trace("XSIGameControlPanel2_XSIGAMEBakeModel_OnClicked");
}

function XSIGameControlPanel2_XSIGAMEBakeProp_OnClicked()
{
	Trace("XSIGameControlPanel2_XSIGAMEBakeProp_OnClicked");
}

function XSIGameControlPanel2_XSIGAMEAddPowerUp_OnClicked()
{
	Trace("XSIGameControlPanel2_XSIGAMEAddPowerUp_OnClicked");

	// Add a new powerup
	GetPrim("Sphere", null, null, null);
	var objb = Selection(0);
	SetValue(objb.name +".name", "PowerUp", null);
	SetValue(objb.name + ".sphere.radius", 2, null);
	AddProp("Custom_parameter_list", "", "", "Settings", null);
	SIAddCustomParameter(objb.name, "Type", siInt4, 0, 0, 3, null, 4, 0, 3, null, null);
	InspectObj (objb.name + ".settings")

}

function XSIGameControlPanel2_XSIGAMEEditPowerUp_OnClicked()
{
	Trace("XSIGameControlPanel2_XSIGAMEEditPowerUp_OnClicked");

	var objb = Selection(0);
	if ( objb == null )
	{
		logmessage( "You must select a powerup first.");
	} else {
		InspectObj (objb.name + ".settings")
	}

}


function XSIGameControlPanel2_OnInit( )
{
	Trace("XSIGameControlPanel2_OnInit");
}

function XSIGameControlPanel2_GameDataDirectory_OnChanged( )
{
	Trace("XSIGameControlPanel2_GameDataDirectory_OnChanged");
	var sNewPath;
	sNewPath = PPG.GameDataDirectory.value;

	var sMessage = "New Project Root:  " + sNewPath + "\r\n";
	logmessage( sMessage );
	PPG.ABLog.value += sMessage;
	
	//
	// Now save the new path in the file
	//
	var fso = XSIFactory.CreateActiveXObject("Scripting.FileSystemObject");
	var pluginfilename = GetPluginFileName();
	var pluginfolder = fso.GetParentFolderName(fso.GetParentFolderName(fso.GetParentFolderName(pluginfilename)));
	var sDataPath;

	// Save the gamedata path to the file.
	fso. pluginfolder
	try 
	{
		var ForWriting = 2;
		var sFilePath = pluginfolder +"\\datalocation.txt";
		f = fso.OpenTextFile(sFilePath, ForWriting, true);
		f.Write(sNewPath);
	}
	catch(e)
	{
		logmessage( "an error occur when saving datalocation.txt");
	}
}

function XSIGame_Init( io_Context )
{
	Trace("XSIGameMenu_Init");

	var oMenu;
	oMenu = io_Context.Source;
	
	oMenu.AddCallbackItem( "Game View","XSIGameMenu_OnGameViewClicked" );
	oMenu.AddCallbackItem( "Control Panel","XSIGameMenu_OnControlPanelClicked" );
	oMenu.AddSeparatorItem()
	oMenu.AddCallbackItem( "Edit...","XSIGameMenu_OnEditClicked" );
//	oMenu.AddCallbackItem( "Install","XSIGameMenu_OnInstallClicked" );
	oMenu.AddCallbackItem( "Reload","XSIGameMenu_OnReloadClicked" );
}

function XSIGameMenu_OnGameViewClicked( io_Context )
{
	Trace("XSIGameMenu_OnGameViewClicked");
	
	// get view manager
	var oVM = Application.Desktop.ActiveLayout.Views( "vm" );
	
	oVM.SetAttributeValue("viewport:a", "Custom Display Host" );	
	oVM.Views("A").SetAttributeValue("targetcontent","XSIGame");
}

function XSIGameMenu_OnControlPanelClicked( io_Context )
{
	Trace("XSIGameMenu_OnControlPanelClicked");
	
	OpenView( "XSIGameControlPanel" );
}

/*
function XSIGameMenu_OnInstallClicked( io_Context )
{
	Trace("XSIGameMenu_OnInstallClicked");

	PluginRegistrar_RegisterUserPreference("XSIGameControlPanel2","XSIGame");
}
*/
function XSIGameMenu_OnReloadClicked( io_Context )
{
	Trace("XSIGameMenu_OnReloadClicked");

	var filename = GetPluginFileName();
	logmessage(filename);
	
	Application.UnLoadPlugin( filename );
	
	// unload user preference
/*	try { DeleteObj( "preferences.XSIGame" ); } catch(e) {logmessage("XSIGameMenu_OnReloadClicked: "+e.description);}
	try {
		var fso = XSIFactory.CreateActiveXObject("Scripting.FileSystemObject");

		var pref = InstallationPath(siUserPath) + "\\Data\\Preferences\\XSIGame.Preset";
		fso.DeleteFile( pref );
	} catch(e) { logmessage("XSIGameMenu_OnReloadClicked: "+e.description);}	
*/	
	Application.LoadPlugin( filename );
}

function XSIGameMenu_OnEditClicked( io_Context )
{
	Trace("XSIGameMenu_OnEditClicked");

	var oView = Desktop.ActiveLayout.CreateView( "Script Editor", "XSIGame" );
	oView.SetAttributeValue("filename", GetPluginFileName() );
}

function Trace( str )
{
	Application.Logmessage(str);
}

function GetPluginFileName()
{
	return Application.Plugins("XSIGame").FileName;
}

function PluginRegistrar_RegisterUserPreference( property, preference )
{
	Trace("XSIGameMenu_RegisterUserPreference");
	var pref = null;
	
	try {
		pref = Dictionary.GetObject("Preferences."+preference);
	} catch (e) {;}
	
	try {
		if ( pref == null )
		{
			var oProp = ActiveSceneRoot.AddProperty( property );
			InstallCustomPreferences( oProp, preference  );	
		}
	}	
	catch (e) { logmessage("PluginRegistrar_RegisterUserPreference: "+e.description);}
}
