// SimpleShader_CGFX
// Initial code generated by Softimage Realtime Shader Wizard
// Executed Wed Nov 18 11:06:21 EST 2009 by belzilm
// 
// 

float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Technique?SimpleVertex:SimpleTexture;";
> = 0.8;

// Shader category used by the render tree
string Category = "Realtime@200/Softimage Examples/CgFX";

// Transform Matrices
float4x4 WorldXf : World < string UIWidget="None";>;
float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None";>;
float4x4 WorldViewProjXf : WorldViewProjection < string UIWidget="None";>;
float4x4 ViewIXf : ViewInverse < string UIWidget="None";>;

// UI parameters

float4 ambient
<
	string UIName = "Ambient";
	string UIWidget = "Color";	
> = {1, 1, 0, 0.0};

texture ColorTexture
<
	string ResourceName = "checker.dds";
	string UIName = "Color Texture";
	string ResourceType = "2D";
>;

sampler2D ColorTextureSampler = sampler_state
{
	Texture = <ColorTexture>;
	MinFilter = Linear;
	MipFilter = Linear;
	MagFilter = Linear;
	AddressU = Wrap;
	AddressV = Wrap;	
};


// Parameters binded to Softimage objects


// Shader implementation.

struct VS_Input
{
	float4 position : POSITION;
	float4 UV : TEXCOORD0;
};

struct VS_Output
{
	float4 position : POSITION;
	float2 UV : TEXCOORD0;
};

VS_Output SimpleVertex_VS( VS_Input in_data )
{
	VS_Output outData = (VS_Output)0;

	outData.position = mul(WorldViewProjXf, in_data.position);
		
	return outData;
}

float4 SimpleVertex_FS( VS_Output in_data ) : COLOR
{
	return ambient;
}

VS_Output SimpleTexture_VS( VS_Input in_data )
{
	VS_Output outData;
	outData.position = mul(WorldViewProjXf, in_data.position);
	outData.UV = in_data.UV.xy;
		
	return outData;
}

float4 SimpleTexture_FS( VS_Output in_data ) : COLOR
{
	float4 map = tex2D(ColorTextureSampler,in_data.UV.xy);
	return map * ambient;
}

technique SimpleVertex 
{
	pass p0 
	{		
		VertexProgram = compile vp20 SimpleVertex_VS();
		FragmentProgram = compile fp20 SimpleVertex_FS();
	}
}

technique SimpleTexture 
{
	pass p0 
	{		
		VertexProgram = compile vp20 SimpleTexture_VS();
		FragmentProgram = compile fp20 SimpleTexture_FS();
	}
}

