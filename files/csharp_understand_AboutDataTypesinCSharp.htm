<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<!-- saved from url=(0024)http://docs.autodesk.com -->
<html>
   <head>
<link href="../style/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="../scripts/prettify.js"></script><script src="../scripts/lib/jquery-1.9.1.min.js" type="text/javascript"></script>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta name="product" content="SI" />
      <meta name="release" content="2015" />
      <meta name="book" content="Developer" />
      <meta name="created" content="2014-03-13" />
      <meta name="topicid" content="GUID-DC63DED0-6B3D-4F5A-9430-53071A87E908" />
      <meta name="topic-type" content="concept" />
      <title>About Data Types and Casting in C#</title><script type="text/javascript" src="../scripts/utils/adsk.redirect.js"></script></head>
   <body height="100%"><div class="body_content" id="body-content"><script>$(document).ready(function() { yepnope.injectJs("./scripts/ac_common.js"); });</script><script type="text/javascript">var reflinkid = "si_cpp"; var reflinkdata = new Array(); function closeRefLinkDiv() { }; $(document).on('click', function() { closeRefLinkDiv(); } );</script><script>$(document).ready(function() { yepnope.injectJs("./scripts/multireflink.js"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script>$("div#WidgetFloaterPanels,link[href*='microsofttranslator.com'],script[src*='microsofttranslator.com'],script[src*='bing.com']").remove();</script><script type='text/javascript'>$("div#navigation,div#breadcrumbs,div#banner").attr("translate","no"); var mtLocation = ((location && location.href && location.href.indexOf('https') == 0)?'https://ssl.microsofttranslator.com':'http://www.microsofttranslator.com')+'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages='; yepnope.injectJs(mtLocation, function() {}, { charset:'utf-8', type:'text/javascript' } );</script><script type="text/javascript">
 reflinkdata.push(["size", "si_cpp/group__RenderMapDefine.html#gaa9831b27d43e13316c674746b6efccb1", "C++ API Reference", "../"]); 
reflinkdata.push(["type", "si_cpp/group__RenderMapDefine.html#ga7117e14e60390664f1862525dd6acaf6", "C++ API Reference", "../"]); 
</script><!-- begin MT -->
            
            <div id='MicrosoftTranslatorWidget' class='Dark' style='position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden'></div><div id="reflinkdiv" style="display:none; font-family: 'RobotoRegular', Arial, Tahoma, sans-serif; visibility:hidden; position:absolute; z-index:40001; padding:5px; border-style:solid; border-width:1px; border-color:#666666; background-color:#dfdfdf; overflow:visible"></div>
      <div><span class="anchor_wrapper"><a name="GUID-DC63DED0-6B3D-4F5A-9430-53071A87E908"></a></span><div class="head">
            <h1>About Data Types and Casting in C#</h1>
         </div>
         <div class="bodyProcess">
            <p><span class="anchor_wrapper"><a name="GUID-EB664C2E-05CC-414D-8BF5-FD85D2145DCB"></a></span>C# is a strongly typed language. All basic types are part of the the <span class="code" translate="no">System</span> namespace (see <a href="#!/url=./files/DataTypes.htm">Comparing Data Types across Languages</a> for more information on type in C#).
            </p>
            <p><span class="anchor_wrapper"><a name="GUID-C873EF9A-039C-456B-9F5E-BD747C08F612"></a></span>Unlike scripting, C# doesn't do type coercion automatically if the calling function
               has arguments that don't match the value so the caller must perform the type cast
               explicitly:
            </p>
            <div class="codeBlock"><pre class="prettyprint">
oCmd.SetFlag( (int)siCommandCapabilities.siCannotBeUsedInBatch, true );
</pre></div>
            <div class="section"><span class="anchor_wrapper"><a name="WS867B13D549B34C4DB8B9D98945203C0F-000A"></a></span> 
               <h2><span class="anchor_wrapper"><a name="GUID-B65C0FE4-865C-4ACE-AB6A-F697802FEEBD"></a></span>Comparing C# to Python and JScript
               </h2> 
               <p><span class="anchor_wrapper"><a name="GUID-F309DE00-A689-4D96-B528-364DA56792E3"></a></span>This table sketches the similarities and differences between C#, Python and JScript:
               </p> 
               <div class="table_Ruled">
                  <table cellpadding="0" cellspacing="0" class="ruled">
                     <colgroup>
                        <col align="left" />
                        <col align="left" />
                        <col align="left" />
                     </colgroup>
                     <tr class="ruledHeading">
                        <th class="table-heading"> <span class="anchor_wrapper"><a name="GUID-C0C909B1-BD1F-495A-ACE3-986E7985EB39"></a></span><p class="table-heading">C#</p> 
                        </th>
                        <th class="table-heading" align="left"> <span class="anchor_wrapper"><a name="GUID-B6D1C4D5-B238-4DDB-808F-321217A4FADA"></a></span><p class="table-heading">Python</p> 
                        </th>
                        <th class="table-heading" align="left"> <span class="anchor_wrapper"><a name="GUID-36CC835E-AB07-4171-AC50-808F8D2D07E3"></a></span><p class="table-heading">JScript</p> 
                        </th>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
int x = 3;
string y = "foo";
FooBarQux fbq = make_fbq ();
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
x = 3
y = "foo"
fbq = make_fbq()
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
var x = 3;
var y = "foo";
var fbq = make_fbq ();
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
expr_1 = expr_2 = expr_3;
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
expr_1 = expr_2 = expr_3
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
expr_1 = expr_2 = expr_3;
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
Class c = new Class (params)
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
c = Class(params)
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
var c = new Class (params)
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
Class[] c = new Class [<a href="javascript:void(0)" data="size" class="a_multireflink">size</a>]
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
c = array(Class, <a href="javascript:void(0)" data="size" class="a_multireflink">size</a>)
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
var c = new Array(<a href="javascript:void(0)" data="size" class="a_multireflink">size</a>)
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
Type[] l = new Type[] { expr_1, expr_1, ..., expr_n }
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
l = (expr_1, expr_1, ..., expr_n)
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
var l = new Array { expr_1, expr_1, ..., expr_n }
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
if (cond) return foo;
do_something ();
return bar;
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
if cond:
    return foo

//You can also say:
return foo if cond
do_something()
return bar
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">if (cond) return foo;
do_something ();
return bar;
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
if (cond) answer = 42;
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
if cond:
    answer = 42
//or
answer = 42 if cond</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
if (cond) answer = 42;
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">if (!cond) answer = 42;
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">answer = 42 if not cond
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">if (!cond) answer = 42;
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">try ...
catch (FooException e) { ... }
catch (BarException e) { ... }
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
try:
    ...
except e as FooException:
    ...
except e as BarException:
    ...
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
try ...
catch (e) { ... }
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
try { foo (); bar (); }
catch (Exception e) { baz (); }
finally { qux (); }
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
try:
    foo()
    bar()
except e:
    baz()
ensure:
    qux()</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
try { foo (); bar (); }
catch (e) { baz (); }
finally { qux (); }
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
throw new System.ArgumentException ("foo");
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
raise System.ArgumentException("foo")
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
throw new Error("foo");
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
<a href="javascript:void(0)" data="type" class="a_multireflink">type</a> t = ((<a href="javascript:void(0)" data="type" class="a_multireflink">type</a>) expr)
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
//exception if cast fails:
t = cast(<a href="javascript:void(0)" data="type" class="a_multireflink">type</a>, expr)
//or
//null if cast fails:
t = expr as <a href="javascript:void(0)" data="type" class="a_multireflink">type</a>
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> <span class="anchor_wrapper"><a name="GUID-A9B952F4-BFD4-4246-B5D6-7AE14668E100"></a></span><p class="table-body">(type is loose in JScript, implicit casting)</p> 
                        </td>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
using System.Windows.Forms;
Button button = control as Button;
if (button != null) ...
else ...
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
import System.Windows.Forms
button = control as Button
if button != null:
    ...
else:
    ...
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> <span class="anchor_wrapper"><a name="GUID-40D8D7E9-9FE8-4BE5-A2B5-25268626F8E8"></a></span><p class="table-body">JScript doesn't really have the concept of modules, but you can import other JScript
                              libraries by reading them into global memory:
                           </p> 
                           <div class="codeBlock"><pre class="prettyprint">
var g_fso = new ActiveXObject( "Scripting.FileSystemObject" );
var g_ts = g_fso.OpenTextFile( "MyJSFunctions.js" );
var g_lib = g_ts.ReadAll();
g_ts.Close();
eval( g_lib );
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
using System;
using SWF = System.Windows.Forms;
using System.Xml;
...
Console.WriteLine ("foo");
SWF.Form x = new SWF.Form ();
XmlDocument doc = new XmlDocument ();
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
import System
import System.Windows.Forms as SWF
import System.Xml

print "foo"
x = SWF.Form()
doc = XmlDocument()
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> <span class="anchor_wrapper"><a name="GUID-47278830-84C8-43BE-A36D-073ACA14BCFF"></a></span><p class="table-body">JScript doesn't use namespaces.</p> 
                        </td>
                     </tr>
                     <tr class="ruledOddRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
x++;
++x;
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
x++
++x
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
x++;
++x;
</pre></div> 
                        </td>
                     </tr>
                     <tr class="ruledEvenRow">
                        <td class="table-body"> 
                           <div class="codeBlock"><pre class="prettyprint">
readonly int X = 2;
const int Y = 3;
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> 
                           <div class="codeBlock"><pre class="prettyprint">
final X = 2
static final Y = 3
</pre></div> 
                        </td>
                        <td class="table-body" align="left"> <span class="anchor_wrapper"><a name="GUID-C4AF2953-BF76-4E56-9700-78474D515E12"></a></span><p class="table-body">There are no constants or read-only variables in JScript.</p> 
                        </td>
                     </tr>
                  </table>
               </div> 
            </div>
         </div>
         <div class="footer-block"><a href="../html/ac.cmtdialog.htm" class="comments-anchor" target="_blank"><span class="comments-link">Please send us your comment about this page</span></a></div><br /><p class="footer-license-block"><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank"><img alt="Creative Commons License" style="border-width: 0;" src="../images/ccLink.png" /></a>&nbsp;<em>Except where otherwise noted, this work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>. Please see the <a href="http://autodesk.com/creativecommons" target="_blank">Autodesk Creative Commons FAQ</a> for more information.</em></p><br /></div>
   </div></body>
</html>