<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<!-- saved from url=(0024)http://docs.autodesk.com -->
<html>
   <head>
<link href="../style/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="../scripts/prettify.js"></script><script src="../scripts/lib/jquery-1.9.1.min.js" type="text/javascript"></script>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <meta name="product" content="SI" />
      <meta name="release" content="2015" />
      <meta name="book" content="Developer" />
      <meta name="created" content="2014-03-13" />
      <meta name="topicid" content="GUID-54498174-330A-4125-9976-036159E33B9E" />
      <meta name="topic-type" content="concept" />
      <title>Regular Custom ICENode</title><script type="text/javascript" src="../scripts/utils/adsk.redirect.js"></script></head>
   <body height="100%"><div class="body_content" id="body-content"><script>$(document).ready(function() { yepnope.injectJs("./scripts/ac_common.js"); });</script><script type="text/javascript">var reflinkid = "si_cpp"; var reflinkdata = new Array(); function closeRefLinkDiv() { }; $(document).on('click', function() { closeRefLinkDiv(); } );</script><script>$(document).ready(function() { yepnope.injectJs("./scripts/multireflink.js"); });</script><script>$(document).ready(function () { prettyPrint(); } );</script><script>$("div#WidgetFloaterPanels,link[href*='microsofttranslator.com'],script[src*='microsofttranslator.com'],script[src*='bing.com']").remove();</script><script type='text/javascript'>$("div#navigation,div#breadcrumbs,div#banner").attr("translate","no"); var mtLocation = ((location && location.href && location.href.indexOf('https') == 0)?'https://ssl.microsofttranslator.com':'http://www.microsofttranslator.com')+'/ajax/v3/WidgetV3.ashx?siteData=y5CYlxTRD0znCzRLDwX0Wy7-g1EdC1XA4dSC-Y1LtaeScyli8_Ps5jPKqTr4xKxMI0OOUfkDplvX3uxN0JnPclebSYW8_J1HBzf4VLQEzQ8M4PsYXF_cMyp1Oumaetky&category=5297189e-446b-459e-ae1d-9d0360400781_tech&ctf=True&ui=true&settings=Manual&from=en&hidelanguages='; yepnope.injectJs(mtLocation, function() {}, { charset:'utf-8', type:'text/javascript' } );</script><script type="text/javascript">
 reflinkdata.push(["XSI::CStatus", "si_cpp/classXSI_1_1CStatus.html", "C++ API Reference", "../"]); 
reflinkdata.push(["XSI::PluginRegistrar", "si_cpp/classXSI_1_1PluginRegistrar.html", "C++ API Reference", "../"]); 
reflinkdata.push(["positions", "si_cpp/group__RenderMapDefine.html#ga4ff6c20401928cc896711bb86fab2870", "C++ API Reference", "../"]); 
</script><!-- begin MT -->
            
            <div id='MicrosoftTranslatorWidget' class='Dark' style='position:absolute;right:20px;top:5px;z-index:100;color:white;background-color:#555555;height:58px;overflow:hidden'></div><div id="reflinkdiv" style="display:none; font-family: 'RobotoRegular', Arial, Tahoma, sans-serif; visibility:hidden; position:absolute; z-index:40001; padding:5px; border-style:solid; border-width:1px; border-color:#666666; background-color:#dfdfdf; overflow:visible"></div>
      <div><span class="anchor_wrapper"><a name="GUID-54498174-330A-4125-9976-036159E33B9E"></a></span><div class="head">
            <h1>Regular Custom ICENode</h1>
         </div>
         <div class="bodyProcess">
            <p><span class="anchor_wrapper"><a name="GUID-E9B285CF-0764-4664-AFD4-53E8D6A18A88"></a></span>Most custom <a href="#!/url=./si_cpp/classXSI_1_1ICENode.html">ICENodes</a> are regular ICENodes processed in multi-threading mode. <a href="#!/url=./si_om/siICENodeDataType.html">Data</a> and <a href="#!/url=./si_om/siICENodeStructureType.html">structure</a> types define the port data type that gets propagated through other ICENodes and <a href="#!/url=./si_om/siICENodeContextType.html">context</a> types specify the connection compatibility of custom node ports with other ICENode
               ports. Mixing context types together is supported for both input and output ports
               but must follow this rule:
            </p>
            <ul>
               <li> 
                  <p><span class="anchor_wrapper"><a name="GUID-0D86B39A-F9F4-4645-B928-2BBE38B31F8D"></a></span> <a href="#!/url=./si_om/siICENodeContextType.html">siICENodeContextSingleton</a> can be mixed with
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-A554AB92-5B68-4664-BD23-34E4739009BC"></a></span> <a href="#!/url=./si_om/siICENodeContextType.html">siICENodeContextComponent0D</a> and/or
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-B1B43AC0-2079-4100-BC5D-748E81BDD7B0"></a></span> <a href="#!/url=./si_om/siICENodeContextType.html">siICENodeContextComponent1D</a> and/or
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-0EB53406-4F58-4EE1-ABF2-20B656783652"></a></span> <a href="#!/url=./si_om/siICENodeContextType.html">siICENodeContextComponent2D</a> and/or
                  </p> 
                  <p><span class="anchor_wrapper"><a name="GUID-6DF291E2-21FC-4882-9019-621BB0982CAB"></a></span> <a href="#!/url=./si_om/siICENodeContextType.html">siICENodeContextComponent0D2D</a>. All ports defined with a mixed context type must be constrained with a context map
                     ID.
                  </p> 
               </li>
            </ul>
            <div><span class="anchor_wrapper"><a name="GUID-AC3F4676-1637-4068-B2B1-D777C62F1954"></a></span><div class="note-important"><span class="label">IMPORTANT:</span> 
                  <p><span class="anchor_wrapper"><a name="GUID-F6EA717E-4B9E-4357-A5F4-03075C3186B0"></a></span>Softimage will log an error at registration time if the above rule is not met, in
                     which case the ICENode registration will be aborted.
                  </p> 
               </div>
            </div>
            <div><span class="anchor_wrapper"><a name="GUID-5536F8CF-A009-46F9-9B0F-284FDE49232D"></a></span><div class="note-tip"><span class="label">TIP:</span> 
                  <p><span class="anchor_wrapper"><a name="GUID-D3DCE9CB-D32C-42B1-A913-7A636E39B25D"></a></span>See the <span class="char_link"><a href="#!/url=./files/cus_icenodes_CustomVector3ToScalarExample.htm">CustomVector3ToScalar Example</a></span> for an example of how to create a regular ICENode.
                  </p> 
               </div>
            </div>
            <div class="section"><span class="anchor_wrapper"><a name="WSB2B58C11414F714EB9B26CD8E647E1E1-0029"></a></span> 
               <h2><span class="anchor_wrapper"><a name="GUID-85DC128E-AB7D-4AD9-AF57-5AAF146A718C"></a></span>Example: Custom ICENode Using Mixed Context Types:
               </h2> 
               <div class="codeBlock"><pre class="prettyprint">
enum IDs
{
	ID_IN_SINGLETON = 0,
	ID_IN_COMPONENT0D = 1,
	ID_IN_SINGLETON_OR_COMPONENT0D = 2,
	ID_G_100 = 100,
	ID_OUT_FLOAT_ARRAY = 200,
	ID_OUT_VECTOR3F_ARRAY = 201,
	ID_TYPE_CNS = 400,
	ID_STRUCT_CNS,
	ID_CTXT_CNS,
	ID_UNDEF = ULONG_MAX
};
 
<a href="javascript:void(0)" data="XSI::CStatus" class="a_multireflink">XSI::CStatus</a> MixedContextSample_Register( <a href="javascript:void(0)" data="XSI::PluginRegistrar" class="a_multireflink">XSI::PluginRegistrar</a>&amp; in_reg );
 
XSIPLUGINCALLBACK CStatus XSILoadPlugin( PluginRegistrar&amp; in_reg )
{
	in_reg.PutAuthor(L"Softimage");
	in_reg.PutName(L"MixedContextSample Plugin");
	in_reg.PutVersion(1,0);

	MixedContextSample_Register( in_reg );

	return CStatus::OK;
}
 
CStatus MixedContextSample_Register( PluginRegistrar&amp; in_reg )
{
	ICENodeDef nodeDef;
	nodeDef = Application().GetFactory().CreateICENodeDef(L"MixedContextSample");
	CStatus st;

	st = nodeDef.AddPortGroup( ID_G_100 );
	st.AssertSucceeded();

	// This port is a single integer.
	st = nodeDef.AddInputPort( ID_IN_SINGLETON, 
		ID_G_100,
		siICENodeDataLong,
		siICENodeStructureSingle,
		siICENodeContextSingleton,
		L"int_singleton", L"int_singleton",
		1L,
		ID_UNDEF, ID_UNDEF, ID_UNDEF );
	st.AssertSucceeded( ) ;

	// Array of <a href="javascript:void(0)" data="positions" class="a_multireflink">positions</a> port.
	st = nodeDef.AddInputPort( ID_IN_COMPONENT0D, 
		ID_G_100,
		siICENodeDataVector3,
		siICENodeStructureSingle,
		siICENodeContextSingleton | siICENodeContextComponent0D,
		L"C0D", L"C0D",
		MATH::CVector3f(1.0,1.0,1.0),
		ID_UNDEF, ID_UNDEF, ID_CTXT_CNS );
	st.AssertSucceeded( ) ;

	// A single float or an array of floats matching the <a href="javascript:void(0)" data="positions" class="a_multireflink">positions</a> array count above.
	st = nodeDef.AddInputPort( ID_IN_SINGLETON_OR_COMPONENT0D, 
		ID_G_100,
		siICENodeDataFloat,
		siICENodeStructureSingle,
		siICENodeContextSingleton | siICENodeContextComponent0D,
		L"Singleton_or_C0D", L"Singleton_or_C0D",
		1.0f,
		ID_UNDEF, ID_UNDEF, ID_CTXT_CNS );
	st.AssertSucceeded( ) ;
	
	// Port to output an array of float values
	st = nodeDef.AddOutputPort( ID_OUT_FLOAT_ARRAY, 
		siICENodeDataFloat,
		siICENodeStructureArray,
		siICENodeContextSingleton | siICENodeContextComponent0D,
		L"OutFloatArray", L"OutFloatArray",
		ID_UNDEF, ID_UNDEF, ID_CTXT_CNS );
	st.AssertSucceeded( ) ;
	
	// Port to output an array of CVector3f values
	st = nodeDef.AddOutputPort( ID_OUT_VECTOR3F_ARRAY, 
		siICENodeDataVector3,
		siICENodeStructureSingle,
		siICENodeContextSingleton | siICENodeContextComponent0D,
		L"OutVector3fArray", L"OutVector3fArray",
		ID_UNDEF, ID_UNDEF, ID_CTXT_CNS );
	st.AssertSucceeded( ) ;
	
	PluginItem nodeItem = in_reg.RegisterICENode( nodeDef );
	nodeItem.PutCategories( L"Custom ICENode" );
	
	return CStatus::OK;
}
 
XSIPLUGINCALLBACK CStatus MixedContextSample_Evaluate( ICENodeContext&amp; in_ctxt )
{
	switch( (ULONG)in_ctxt.GetEvaluatedOutputPortID() )
	{
		case ID_OUT_FLOAT_ARRAY :
		{
			CDataArrayLong a_count( in_ctxt, ID_IN_SINGLETON );
			LONG count = a_count[0];
			CDataArray2DFloat aa_out( in_ctxt );
			CDataArray2DFloat::Accessor a_out = aa_out.Resize( 0, count );
			for( ULONG i = 0; i &lt; a_out.GetCount(); ++i ) 
			{
				a_out[i] = (float)i;
			}	
		}
		break;
		
		case ID_OUT_VECTOR3F_ARRAY :
		{
			CIndexSet indexSet( in_ctxt );
			CDataArrayVector3f v3fArray( in_ctxt, ID_IN_COMPONENT0D );
			CDataArrayFloat fArray( in_ctxt, ID_IN_SINGLETON_OR_COMPONENT0D );	
			float fFact = fArray[0];
			MATH::CVector3f v3f( fFact, fFact*2.0, -fFact );
			CDataArrayVector3f outVector3f( in_ctxt );
			for(CIndexSet::Iterator it = indexSet.Begin(); it.HasNext(); it.Next())
			{ 
				fFact *= 1.1;
				v3f.ScaleInPlace( fFact );
				outVector3f[it] = v3f;
			}
		}
		break;
	};
	
	return CStatus::OK;
}</pre></div> 
            </div>
         </div>
         <div class="footer-block"><a href="../html/ac.cmtdialog.htm" class="comments-anchor" target="_blank"><span class="comments-link">Please send us your comment about this page</span></a></div><br /><p class="footer-license-block"><a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank"><img alt="Creative Commons License" style="border-width: 0;" src="../images/ccLink.png" /></a>&nbsp;<em>Except where otherwise noted, this work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="_blank">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>. Please see the <a href="http://autodesk.com/creativecommons" target="_blank">Autodesk Creative Commons FAQ</a> for more information.</em></p><br /></div>
   </div></body>
</html>